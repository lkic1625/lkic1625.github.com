<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-12-10T11:47:21+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">untitled</title><subtitle>기록용 블로그입니다. 개발관련 게시글을 주로 올립니다.</subtitle><author><name>조원빈</name></author><entry><title type="html">WebSocket</title><link href="http://localhost:4000/backend/websocket/" rel="alternate" type="text/html" title="WebSocket" /><published>2020-12-09T00:00:00+09:00</published><updated>2020-12-09T04:00:00+09:00</updated><id>http://localhost:4000/backend/websocket</id><content type="html" xml:base="http://localhost:4000/backend/websocket/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;최근에 포스팅이 눈에 띄게 적었는데, 다시 시작해볼까 한다. 조금 들떠있었나보다. 다시 마음을 가다듬고 싶다.&lt;/p&gt;

&lt;p&gt;오늘은 웹소켓에 대해 알아보려한다. 입사 전에 간단한 채팅 시스템을 만들고 싶은데 웹소켓을 사용하려 한다. 물론 회사에선 직접적으로 안 쓰일 수 있겠지만, 절대 필요없는 지식이 없다는 생각으로 포스팅한다.&lt;/p&gt;

&lt;h1 id=&quot;websocket&quot;&gt;WebSocket&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;The WebSocket Protocol enables two-way communication between a client running untrusted code in a controlled environment to a remote host that has opted-in to communications from that code&lt;br /&gt;&lt;br /&gt;
— RFC 6455 - The WebSocket Protocol&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;본론부터 말하자면, 웹소켓은 양방향 전이중 통신을 지원하는 프로토콜이다. HTTP 프로토콜 위에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCP/IP&lt;/code&gt; 소켓 커넥션을 통해 동작한다. 웹소켓은 실시간으로 사용자와 서버가 정보를 주고받을 경우(대표적으론 실시간 시스템이 있겠다.) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt;보다 나은 선택이 될 수 있다.&lt;/p&gt;

&lt;p&gt;웹소켓이 없던 시절, 실시간 서비스를 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; 기반을 어떻게 응용했을까?
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt;의 경우 사용자가 요청하지 않는다면 서버는 사용자에게 어떠한 데이터도 보낼 수 없다. 이러한 문제를 해결하기 위해 개발자들은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Long-polling&lt;/code&gt; 혹은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Comet&lt;/code&gt;과 같은 트릭을 사용하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stateless&lt;/code&gt;한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt;에서 위와 같은 서비스를 구현했지만, 추가적이고 불피요한 자원을 지속적으로 사용하게 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“contain lots of additional, unnecessary header data and introduce latency” and resulted in “an outrageously high price tag”&lt;br /&gt;&lt;br /&gt;
ㅡ HTML5 Web Socket in Essence - Wayne Ye&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;benefits-of-websocket&quot;&gt;Benefits of WebSocket&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;websocket.org&lt;/code&gt;에서는 위와같은 상황에 대해서 왜 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebSocket&lt;/code&gt;을 사용하는 것이 이로운지 직접적인 예시를 들어 설명했다.&lt;/p&gt;

&lt;p&gt;특정 상황을 가정해보자.
서버와 사용자가 주고받는 응답/요청에 대한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP header&lt;/code&gt;는 대략 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;871byte&lt;/code&gt;이고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Websocket&lt;/code&gt;을 통해 사용자와 서버가 연결한 경우 데이터의 길이는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2byte&lt;/code&gt;보다 적다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP Request
    &lt;ol&gt;
      &lt;li&gt;1000명의 사용자가 매 초마다 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;polling&lt;/code&gt;을 할 경우: 871 x 1000 = 871000 bytes = 69680000 bit per second (6.6 Mbps)&lt;/li&gt;
      &lt;li&gt;10000명의 사용자가 매 초마다 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;polling&lt;/code&gt;을 할 경우: 871 x 10000 = 8710000 bytes = 696800000 bit per second (66.5 Mbps)&lt;/li&gt;
      &lt;li&gt;100000명의 사용자가 매 초마다 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;polling&lt;/code&gt;을 할 경우: 871 x 100000 = 87100000 bytes = 6968000000 bit per second (665 Mbps)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;HTTP WebSocket
    &lt;ol&gt;
      &lt;li&gt;1000명의 사용자가 매 초마다 하나의 메세지를 수신할 경우: 2 x 1000 = 2000 bytes = 16000 bit per second (0.015 Mbps)&lt;/li&gt;
      &lt;li&gt;10000명의 사용자가 매 초마다 하나의 메세지를 수신할 경우: 2 x 10000 = 20000 bytes = 160000 bit per second (0.153 Mbps)&lt;/li&gt;
      &lt;li&gt;100000명의 사용자가 매 초마다 하나의 메세지를 수신할 경우: 2 x 100000 = 200000 bytes = 1600000 bit per second (1.526 Mbps)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/poll-ws-compare.gif&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자 이제 우리가 왜 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;websocket&lt;/code&gt;을 써야할지는 명확해진 것 같다.&lt;/p&gt;

&lt;h2 id=&quot;protocol-overview&quot;&gt;Protocol Overview&lt;/h2&gt;

&lt;p&gt;웹소켓은 기본적인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; 요청과 응답을 통해 프로토콜을 시작한다. 사용자는 웹소켓 통신을 시작하고 싶다는 요청을 보내고, 서버는 가능여부를 응답으로 보낸다.&lt;/p&gt;

&lt;p&gt;초기 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handshake&lt;/code&gt;가 성공적으로 마무리 되면, 사용자와 서버는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;basic framed message protocol&lt;/code&gt;을 사용하여 통신한다. 만약 양쪽 모두 커넥션을 닫는 것에 동의한다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCP&lt;/code&gt; 커넥션을 종료한다.&lt;/p&gt;

&lt;h2 id=&quot;websocket-open-handshake&quot;&gt;WebSocket Open handshake&lt;/h2&gt;

&lt;p&gt;웹소켓은 기존의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;/code&gt; 스킴대신, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wss&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ws&lt;/code&gt; 스킴을 사용하여 통신한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ws://host:port/path/?query&lt;/code&gt;와 같은 방식으로 진행되며 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URI&lt;/code&gt;의 기본적인 구조는 기존의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;/code&gt;와 다르지 않은 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;그렇다면 웹소켓을 사용하기 위해선 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt;에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebSocket&lt;/code&gt; 프로토콜로 변경하는 과정이 반드시 필요할 것이다. 예제를 통해 핸드셰이킹과 이에 포함되어야 하는 필수적인 헤더에 대해 알아보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET ws://example.com:8181/ HTTP/1.1
Host: localhost:8181
Connection: Upgrade
Pragma: no-cache
Cache-Control: no-cache
Upgrade: websocket
Sec-WebSocket-Version: 13
Sec-WebSocket-Key: q4xkcO32u266gldTuKaSOw==
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Connection: Upgrade&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Connection&lt;/code&gt; 헤더는 보편적으로 현재 요청/응답이 끝난 후 네트워크 연결을 컨트롤하기 위해 존재하며, 이러한 상황에는 보통 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keep-alive&lt;/code&gt;를 사용한다. 웹소켓 핸드셰이킹을 할 경우 헤더는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Upgrade&lt;/code&gt;를 값으로 가지며, 현재 연결을 끊지않고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt;가 아닌 다른 프로토콜을 사용하여 요청할 것을 의미한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Upgrade: websocket&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Upgrade&lt;/code&gt; 헤더는 서버에게 다른 프로토콜로 변경할 것을 요청한다. 우리는 현재 웹소켓을 사용하기 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;websocket&lt;/code&gt;을 명시하였다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sec-WebSocket-Key: q4xkcO32u266gldTuKaSOw==&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sec-WebSocket-Key&lt;/code&gt; 헤더는 사용자가 생성한 일회용 난수(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nonce&lt;/code&gt;)다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sec-WebSocket-Version: 13&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;웹소켓의 버전을 나타낸다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사용자는 웹소켓 연결을 요청하고 서버의 응답을 기다린다. 서버는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Upgrade&lt;/code&gt;에 명시된 프로토콜로 바꾸기 위해서 반드시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP 101 Switching Protocols&lt;/code&gt; 상태코드를 보낸다. 또한, 서버는 헤더에 커넥션이 성공적으로 변경됐는지를 포함시켜야 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: fA9dggdnMPU79lJgAE3W4TRnyDM=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Connection: Upgrade&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;커넥션이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upgade&lt;/code&gt;된 것을 확인.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sec-WebSocket-Accept: fA9dggdnMPU79lJgAE3W4TRnyDM=&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;위 헤더는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA-1&lt;/code&gt;에 의해 해싱된 벨류로서 클라이언트가 보낸 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sec-WebSocket-Key&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nonce&lt;/code&gt;값과 &lt;a href=&quot;https://tools.ietf.org/html/rfc6455&quot;&gt;RFC 6455&lt;/a&gt;에 명시된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&lt;/code&gt;을 조합하여 생성한 문자열이다. 이는 복잡해 보이지만 양쪽이 모두 웹소켓을 지원한다는 것을 의미한다. 만약 어느 한 쪽의 문제로 위 통신과정을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; 프로토콜로 인식한다면 잠재적인 보안 문제가 존재한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;헤더-페이로드&quot;&gt;헤더, 페이로드&lt;/h2&gt;

&lt;p&gt;웹소켓은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;framed protocol&lt;/code&gt;이다. 즉, 데이터를 전송할 때, 프레임 시퀀스를 보낸다. 기본적인 프레임 프로토콜은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opcode&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;payload&lt;/code&gt;의 길이, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frame type&lt;/code&gt;을 정의하며, 추가적인 데이터 위치를 정의한다. 자세한 사항은 &lt;a href=&quot;https://tools.ietf.org/html/rfc6455#section-5.2&quot;&gt;RFC 6455&lt;/a&gt;에서 확인 가능하다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-------+-+-------------+-------------------------------+
|F|R|R|R| opcode|M| Payload len |    Extended payload length    |
|I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |
|N|V|V|V|       |S|             |   (if payload len==126/127)   |
| |1|2|3|       |K|             |                               |
+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
|     Extended payload length continued, if payload len == 127  |
+ - - - - - - - - - - - - - - - +-------------------------------+
|                               |Masking-key, if MASK set to 1  |
+-------------------------------+-------------------------------+
| Masking-key (continued)       |          Payload Data         |
+-------------------------------- - - - - - - - - - - - - - - - +
:                     Payload Data continued ...                :
+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
|                     Payload Data continued ...                |
+---------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 포스트에선 프로토콜에 중요한 부분만 설명하겠다. 자세한 내용은 공식 문서를 확인하길 바란다.&lt;/p&gt;

&lt;h3 id=&quot;fin-bit&quot;&gt;Fin bit&lt;/h3&gt;

&lt;p&gt;첫 비트는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fin bit&lt;/code&gt; 헤더다. 이 비트가 켜질 경우 현재 프레임이 메세지의 마지막 부분임을 의미한다.&lt;/p&gt;

&lt;h3 id=&quot;rsv1-rsv2-rsv3-bits&quot;&gt;RSV1, RSV2, RSV3 bits&lt;/h3&gt;

&lt;p&gt;확장성을 위해 존재한다.&lt;/p&gt;

&lt;h3 id=&quot;opcode&quot;&gt;opcode&lt;/h3&gt;

&lt;p&gt;프레임은 페이로드를 어떻게 해석할지 결정하기 위한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opcode&lt;/code&gt;를 가지고 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Opcde value&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0x00&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;This frame continues the payload from the previous frame.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0x01&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Denotes a text frame. Text frames are UTF-8 decoded by the server.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0x02&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Denotes a binary frame. Binary frames are delivered unchanged by the server.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0x03 - 0x07&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Reserved for future use.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0x08&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Denotes the client wishes to close the connection.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0x09&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;A ping frame. Serves as a heartbeat mechanism ensuring the connection is still alive. The receiver must respond with a pong.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0x0a&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;A pong frame. Serves as a heartbeat mechanism ensuring the connection is still alive. The receiver must respond with a ping frame.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0x0b - 0x0f&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Reserved for future use.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;mask&quot;&gt;Mask&lt;/h3&gt;

&lt;p&gt;이 비트가 켜질 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;masking&lt;/code&gt;이 활성화된다. 웹소켓은 사용자가 선택한 임의의 키를 사용하여 모든 페이로드를 난독화한다. 페이로드 데이터는 전송전에 마스킹 키와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XOR&lt;/code&gt; 연산을 진행한다. 마스킹은 웹소켓 프레임이 캐시가능한 데이터로 판단되는 것을 막는다.&lt;/p&gt;

&lt;p&gt;웹소켓 프로토콜 배포과정에서, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cache poisoning&lt;/code&gt;이라는 공격 기법이 일어날 수 있다. 이는 인터넷 구조와 상호작용 하는 새로운 프로토콜에서 자주 일어날 수 있는 방법이며, 자세한 사항은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Security&lt;/code&gt;와 관련된 포스트를 추후 작성하도록 하겠다.&lt;/p&gt;

&lt;h3 id=&quot;payload-len&quot;&gt;Payload len&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Payload len&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Extended payload length&lt;/code&gt;는 현재 프레임에 패이로드 길이를 나타낸다. 만약 패이로드가 126 bytes 보다 작을 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Payload len&lt;/code&gt;에 표시된다. 페이로드 데이터가 커질 것을 대비해 추가적인 필드를 마련해둔 것이다.&lt;/p&gt;

&lt;h3 id=&quot;masking-key&quot;&gt;Masking-key&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MASK&lt;/code&gt; 비트에서 말했듯이, 마스킹을 진행하기 위한 키다.&lt;/p&gt;

&lt;h3 id=&quot;payload-data&quot;&gt;Payload data&lt;/h3&gt;

&lt;p&gt;임의의 응용 프로그램 데이터와 클라이언트 서버 간에 협의된 모든 데이터를 포함한다. 협의된 내용은 초기 핸드셰이킹에서 다루어진다.&lt;/p&gt;

&lt;h2 id=&quot;close-handshake&quot;&gt;Close Handshake&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x08 opcode&lt;/code&gt;를 설정하면 웹소켓 연결을 끊을 수 있다. 연결을 끊은 이유가 추가적으로 포함될 수 있으며, 한 쪽이 연결을 끊을 것을 요청하면 반드시 반대쪽에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;response&lt;/code&gt;를 주어야한다.&lt;/p&gt;

&lt;p&gt;Once the close frame has been received by both parties, the TCP connection is torn down&lt;/p&gt;

&lt;h1 id=&quot;마치며&quot;&gt;마치며&lt;/h1&gt;

&lt;p&gt;오늘은 웹소켓 프로토콜에 전반적인 개요에 대해 알아보았다. 이 포스트에선 아직, 보안적인 측면에서 마련된 장치에 대해 자세한 이야기를 하지 않았다. 이는 추후 포스트에서 다루도록 하겠다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;font size=&quot;6&quot;&gt;Refernce&lt;/font&gt;
  &lt;ul&gt;
    &lt;li&gt;https://www.codeproject.com/Articles/209041/HTML5-Web-Socket-in-Essence#Introduction&lt;/li&gt;
    &lt;li&gt;https://tools.ietf.org/html/rfc6455&lt;/li&gt;
    &lt;li&gt;https://sookocheff.com/post/networking/how-do-websockets-work/&lt;/li&gt;
    &lt;li&gt;By Vanessa Wang, Frank Salim, and Peter Moskovits, The Definitive Guide to HTML5 WebSocket, 2013&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>조원빈</name></author><category term="backend" /><category term="backend" /><category term="ws" /><category term="websocket" /><category term="http" /><summary type="html">Introduction</summary></entry><entry><title type="html">Pollard’s rho algorithm</title><link href="http://localhost:4000/algorithm/pollards_rho/" rel="alternate" type="text/html" title="Pollard’s rho algorithm" /><published>2020-12-03T00:00:00+09:00</published><updated>2020-11-27T05:00:00+09:00</updated><id>http://localhost:4000/algorithm/pollards_rho</id><content type="html" xml:base="http://localhost:4000/algorithm/pollards_rho/">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;이번 포스트에서 다룰 알고리즘은 폴라드 \(\rho\) 알고리즘이다. 폴라드 \(\rho\) 알고리즘은 빠른 소인수 분해를 위한 알고리즘이다.&lt;/p&gt;

&lt;p&gt;백준에 &lt;a href=&quot;https://www.acmicpc.net/problem/4149&quot;&gt;큰 수 소인수분해 4149&lt;/a&gt; 문제 풀이와 함께 진행하겠다.&lt;/p&gt;

&lt;h1 id=&quot;core-ideas&quot;&gt;Core ideas&lt;/h1&gt;

&lt;p&gt;소인수 분해하려는 숫자 \(n = pq\)에서 \(p\)는 자명하지 않은 &lt;b&gt;인수&lt;/b&gt;라고 가정하자. 다항식을 \(n\)으로 나누는 연산 \(g(x) = (x^2 + 1)\text{ mod n}\)은 암호학에 유사난수 수열을 생성(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PRG&lt;/code&gt;)할 때 사용된다.&lt;/p&gt;

&lt;p&gt;이때 시작값을 적당히 2로 설정하면&lt;/p&gt;

\[x_1 = g(2),\,x_2=g(g(2)),\,x_3=g(g(g(2)))\]

&lt;p&gt;위와 같은 형태로 수열이 생성된다. 이를 \(\{x_k\}\)라 하자. 그러면 이 수열은 다른 수열 \(\{x_k \,mod\,p\}\) 과 관련이 있다. 하지만 \(p\)가 사전에 주어지지 않았기 때문에, 두 번째 수열은 위 알고리즘으로 계산 불가능하다. 여기서 첫 번째 수열과 두 번째 수열의 관계가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;폴라드 로&lt;/code&gt; 알고리즘의 &lt;b&gt;핵심&lt;/b&gt; 아이디어다.&lt;/p&gt;

&lt;p&gt;이 수열에 나오는 수의 개수는 유한하기 때문에, \(n\)의 나머지 수열 \(\{x_k\}\)와 \(\{x_k \,mod\,p\}\)는 언젠가 반복된다. 이 수열을 완전한 난수라고 가정하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;birthday pardox&lt;/code&gt;에 의해 이 수열이 반복되기 전까지 나오는 서로 다른 \(x_k\)의 개수는 대략 \(O(\sqrt{n})\)이다. (여기서 \(N\)은 가능한 값의 개수이다.) 따라서, 수열  \(\{x_k \,mod\,p\}\)은 수열  \(\{x_k\}\)보다 먼저 반복된다.&lt;/p&gt;

&lt;p&gt;각각의 수열을 유향 그래프로 표현한다면 그리스 문자 \(\rho\)와 같이 생겨서 폴라드 로 알고리즘이라 붙인 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/pollards'_rho.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그렇다면, 두 수열의 관계를 어떻게 이용하여 우리는 인수 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt;를 찾아내는 것일까? 알고리즘은 아래와 같이 동작한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;위 수열에서 나오는 반복을 순환 찾기 알고리즘으로 찾는다.&lt;/li&gt;
  &lt;li&gt;먼저 두 수 \(x_i\)와 \(x_j\)를 정한다. \(x_i \equiv x_j \pmod p\)를 만족 시 \(p = k(x_i - x_j) ,\, k \in \mathbb{N}\)가 성립한다.&lt;/li&gt;
  &lt;li&gt;\(gcd(x_i - x_j, n)\)이 1이 아니라면 수열 \(\{x_k \,mod\,p\}\)는 사이클이 있다는 것을 의미하고, \(x_i - x_j\)이 p의 배수 혹은 0이 되어야한다.&lt;/li&gt;
  &lt;li&gt;\(gcd(x_i - x_j, n)\)는 결국 \(n\) 혹은 \(p\)를 값으로 가지게되고, \(p\)를 구할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;algorithm&quot;&gt;Algorithm&lt;/h1&gt;

&lt;h2 id=&quot;floyds-cycle-detection-algorithm&quot;&gt;Floyd’s Cycle Detection Algorithm&lt;/h2&gt;

&lt;p&gt;우선 수열 \(\{x_k \,mod\,p\}\)의 사이클을 찾는 알고리즘은, 플로이드 알고리즘을 통해 구현한다.&lt;/p&gt;

&lt;p&gt;이는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Two Pointer&lt;/code&gt;를 이용하며, 이 포인터는 서로 다른 속도로 시퀀스를 탐색한다. 매 반복마다, 첫 포인터는 한 칸을 움직이고 두번째 포인터는 두 칸을 움직인다. 만약 사이클 길이가 \(\lambda\)이고 사이클이 시작하는 곳의 첫 인덱스가 \(\mu\)일 경우 시간복잡도는 \(O(\mu + \lambda)\)다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This algorithm is also known as tortoise and the hare algorithm, based on the tale in which a tortoise (here a slow pointer) and a hare (here a faster pointer) make a race.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;플로이드 알고리즘은 재귀적으로 비교하는 두 인자에 진행속도에 차이를 두어 만약 사이클이 존재할 경우 둘이 만날 수 밖에 없도록 하는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;pseudo-code&quot;&gt;pseudo code&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function floyd(f, x0):
    tortoise = x0
    hare = f(x0)
    while tortoise != hare:
        tortoise = f(tortoise)
        hare = f(f(hare))
    return true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;implementation&quot;&gt;implementation&lt;/h3&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;			
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;brents-algorithm&quot;&gt;Brent’s algorithm&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__int128_t&lt;/code&gt; 타입을 사용하지 않을 경우 곱셈 연산을 매우 느리게 진행해야하는데, 이에 따라 플로이드 알고리즘 만으로는 제한시간 내에 풀기 어려울 수 있어 새로운 알고리즘 도입이 필요했다.&lt;/p&gt;

&lt;p&gt;위 알고리즘은 플로이드 알고리즘과 비슷하다. 투 포인터를 사용하지만 \(2^i\)만큼 전진시킨다. \(2^i\)가 \(\mu, \lambda\)보다 크면, 사이클을 찾을 수 있다. 자세한 코드는 최종 코드에서 확인하길 바란다.&lt;/p&gt;

&lt;h3 id=&quot;pseudo-code-1&quot;&gt;pseudo code&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function floyd(f, x0):
    tortoise = x0
    hare = f(x0)
    l = 1
    while tortoise != hare:
        tortoise = hare
        repeat l times:
            hare = f(hare)
            if tortoise == hare:
                return true
        l *= 2
    return true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;miller-rabin-primality-test&quot;&gt;Miller-Rabin primality test&lt;/h2&gt;

&lt;p&gt;여기서 주의해야할 점은 폴라드 로 알고리즘이 소인수가 아닌 &lt;b&gt;인수&lt;/b&gt;분해 알고리즘이란 점이다. 즉, 우리가 구한 \(p\)가 소수인지를 빠르게 판단해야 한다. 이는 밀러라빈 소수 판정법을 통해 구현해야 한다.&lt;/p&gt;

&lt;p&gt;밀러-라빈 소수 판정법은 확률적 판별 알고리즘이다. 페르마 테스트와 더불어 몇 개의 인자를 넣어 확률적으로 아닌지를 판단해야한다.&lt;/p&gt;

&lt;h3 id=&quot;lemma&quot;&gt;Lemma&lt;/h3&gt;

&lt;p&gt;알고리즘 설명 전에 우선 보조정리부터 소개하겠다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;소수 \(p\)에 대해 \(x^2 \equiv \pmod p\)이면 \(x \equiv 1 \pmod p\) 거나 \(x \equiv -1 \pmod p\)이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;\(Proof\): 합동식 정의에서 \(x^2-1 = (x+1)(x-1)\)은 \(p\)의 배수이고, \(x+1\)과 \(x-1\) 둘 중 하나는 \(p\)의 배수여야한다.&lt;/p&gt;

&lt;p&gt;여기서 수학적 직관이 어느정도 있는 사람이라면, 과연 위 합동식이 해를 두 개만 가지는지에 대해 의문을 들 수 있다. 먼저 정답을 말하자면 그렇다. 우리는 좀 더 일반적인 상황에서 아래와 같은 증명도 가능하다!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;\(\mathbb{Z}_p\) 상에서 다항식 차수로 \(n\)을 가지는 \(f(x)\)는 최대 \(n\)개의 해를 가진다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 증명은 &lt;a href=&quot;https://crypto.stanford.edu/pbc/notes/numbertheory/poly.html&quot;&gt;링크&lt;/a&gt;에서 확인 가능하다.&lt;/p&gt;

&lt;h3 id=&quot;mathematical-concepts&quot;&gt;Mathematical concepts&lt;/h3&gt;
&lt;p&gt;\(Claim\): \(n\)을 2보다 큰 소수라 하자. 그러면 아래 두 조건 중 하나를 반드시 만족한다.&lt;/p&gt;

\[a^d \equiv 1 \pmod n\]

\[a^{2^rd} \equiv -1 \pmod n \text{, for some }0 \le r \le s-1\]

&lt;p&gt;\(Proof\): &lt;a href=&quot;https://en.wikipedia.org/wiki/Fermat%27s_little_theorem&quot;&gt;페르마 소정리&lt;/a&gt;에 따라 소수 \(n\)에 대해 \(a\)는 아래를 만족한다.&lt;/p&gt;

\[a^{n-1} \equiv 1 \pmod n\]

&lt;p&gt;여기서 어떤 수 \(n\)가 홀수라면, \(n-1\)은 짝수다. 짝수는 2의 거듭제곱을 약수로 가지므로 다음과 같이 정의된다.&lt;/p&gt;

\[n-1 = 2^sd, \, \text{d is odd}\]

&lt;p&gt;따라서, \(a^{n-1} \equiv 1 \pmod n\)은 아래와 같이 변형할 수 있다.&lt;/p&gt;

\[\begin{align} a^{2^sd} &amp;amp; = (a^{2^{s-1}d}-1)(a^{2^{s-1}d} + 1) \\ &amp;amp;= (a^{2^{s-2}d} - 1)(a^{2^{s-2}d} + 1)(a^{2^{s-1}d} + 1) \\ ... \\ &amp;amp;= (a^d - 1)(a^{2d} + 1)...(a^{2^{s-3}d} + 1)(a^{2^{s-2}d} + 1)(a^{2^{s-1}d} + 1) \end{align}\]

&lt;p&gt;따라서, 두 조건 중 하나를 만족할 경우 \(n\)은 확률적으로 소수임을 알 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;소수-판정-코드&quot;&gt;소수 판정 코드&lt;/h3&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pow_with_mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__int128_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__int128_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;miller_rabin_primality_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pow_with_mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pow_of_a_d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pow_with_mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pow_of_a_d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pow_of_a_d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_prime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000000ULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;325&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9375&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28178&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;450775&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9780504&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1795265022&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;miller_rabin_primality_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;최종-코드&quot;&gt;최종 코드&lt;/h2&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;vector&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;algorithm&amp;gt;
&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//NOTICE: __int128_t type only use in gcc&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//return a^b % mod with divide and conquer&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pow_with_mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__int128_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__int128_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;miller_rabin_primality_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pow_with_mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pow_of_a_d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pow_with_mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pow_of_a_d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pow_of_a_d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_prime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000000ULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;325&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9375&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28178&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;450775&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9780504&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1795265022&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;miller_rabin_primality_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Euclidean algorithm&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_prime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;factors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__int128_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//Brent's Algorithm: Faster than Floyd's cycle-fiding algorithm&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__int128_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;factorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;factorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ios_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_with_stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;factorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;font size=&quot;6&quot;&gt;Refernce&lt;/font&gt;
  &lt;ul&gt;
    &lt;li&gt;https://cp-algorithms.com/algebra/factorization.html#toc-tgt-9&lt;/li&gt;
    &lt;li&gt;https://ko.wikipedia.org/wiki/폴라드_로_알고리즘&lt;/li&gt;
    &lt;li&gt;https://aruz.tistory.com/140&lt;/li&gt;
    &lt;li&gt;https://crypto.stanford.edu/pbc/notes/numbertheory/millerrabin.html&lt;/li&gt;
    &lt;li&gt;https://casterian.net/archives/396&lt;/li&gt;
    &lt;li&gt;https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>조원빈</name></author><category term="algorithm" /><category term="math" /><category term="number_theory" /><category term="prime" /><summary type="html"></summary></entry><entry><title type="html">HTTP 헤더</title><link href="http://localhost:4000/backend/http_headers/" rel="alternate" type="text/html" title="HTTP 헤더" /><published>2020-11-29T00:00:00+09:00</published><updated>2020-11-27T04:00:00+09:00</updated><id>http://localhost:4000/backend/http_headers</id><content type="html" xml:base="http://localhost:4000/backend/http_headers/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;오늘은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP headers&lt;/code&gt;에 대해 알아보려 한다.&lt;/p&gt;

&lt;p&gt;보통 블로그 포스팅 혹은 면접 준비를 위해 여러 블로그를 참조하는데, 최근에 한 포스트에서 인상적인 문구를 봤다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;결국, 어떤 프로토콜을 이해하려면 프로토콜의 헤더만 알면 된다는 얘기었다.&lt;br /&gt;
특정 프로토콜의 헤더의 내용은 특정 프로토콜의 기능을 제공하기 위해 담고 있는 최소한의 정보기 때문이다.&lt;br /&gt;
출처: https://jeong-pro.tistory.com/181 [기본기를 쌓는 정아마추어 코딩블로그]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; 프로토콜에 대한 전반적인 이해를 위해 이 포스트를 작성한다.&lt;/p&gt;

&lt;h1 id=&quot;http-headers&quot;&gt;HTTP headers&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;HTTP headers let the client and the server pass additional information with an HTTP request or response&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;말 그대로 통신 중 이를 해석하기 위한 추가적인 정보다.&lt;/p&gt;

&lt;p&gt;보통 헤더는 콜론(:)으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;field&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt;를 구분하며 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;field&lt;/code&gt;는 대소문자를 구분하지 않고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; 앞에 나오는 공백을 무시한다.&lt;/p&gt;

&lt;p&gt;헤더는 아래와 같이 4가지 분류로 나뉜다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;General headers: 요청과 응답에 모두 포함되는 헤더지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt;에서 전송되는 데이터와는 관련이 없다.&lt;/li&gt;
  &lt;li&gt;Request headers: 가져올 리소스와 이를 요청하는 클라이언트에 대한 자세한 정보를 가진다.&lt;/li&gt;
  &lt;li&gt;Response header: 리소스를 제공하는 서버, 위치 등 응답에 대한 추가적인 정보를 가지고 있다.&lt;/li&gt;
  &lt;li&gt;Entity heders: 콘텐츠 데이터 길이, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MIME type&lt;/code&gt;과 같은 리소의 본문에 대한 정보를 가진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;또한, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;프록시&lt;/code&gt;가 어떻게 아래 헤더를 다루냐에 따라 분류할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Connection&lt;/li&gt;
  &lt;li&gt;Keep-Alive&lt;/li&gt;
  &lt;li&gt;Proxy-Authenticate&lt;/li&gt;
  &lt;li&gt;Proxy-Authorization&lt;/li&gt;
  &lt;li&gt;TE&lt;/li&gt;
  &lt;li&gt;Trailer&lt;/li&gt;
  &lt;li&gt;Transfer-Encoding&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Upgrade (see also Protocol upgrade mechanism).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;End-to-end headers: 이 헤더는 반드시 최종 메세지 수신자에게 전송되야 하는 헤더다. 중간 프록시는 반드시 이를 캐싱해야하며, 어떤 수정도 하면 안 된다.&lt;/li&gt;
  &lt;li&gt;Hop-by-hop headers: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;single transport-level connection&lt;/code&gt;에서 유의미한 헤더다. 반드시 재전송 혹은 캐싱될 필요 없다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Connection&lt;/code&gt; general header 를 사용하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hob-by-hob header&lt;/code&gt;만 설정할 수 있다는 점을 유의하자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;general-headers&quot;&gt;General headers&lt;/h2&gt;

&lt;p&gt;요청 및 응답 메세지 모두에서 사용 가능한 기적인 헤더다.&lt;/p&gt;

&lt;h3 id=&quot;cache-control&quot;&gt;Cache-Control&lt;/h3&gt;

&lt;p&gt;이후 다른 포스트로 이전할 수도 있는 항목입니다.&lt;/p&gt;

&lt;h4 id=&quot;syntax&quot;&gt;syntax&lt;/h4&gt;

&lt;p&gt;모든 캐싱시스템이 따라야할 지시사항을 지정한다. 문법은 아래와 같다&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cache-Control : cache-request-directive|cache-response-directive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;서버와 클라이언트는 캐시에서 특정 문서를 요청하거나 캐싱하기 위해 특정 파라미터를 이용하여 이 헤더를 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;클라이언트가 사용가능한 캐싱 요청 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;directive&lt;/code&gt;다&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cache-Control: max-age=&amp;lt;seconds&amp;gt;
Cache-Control: max-stale[=&amp;lt;seconds&amp;gt;]
Cache-Control: min-fresh=&amp;lt;seconds&amp;gt;
Cache-control: no-cache
Cache-control: no-store
Cache-control: no-transform
Cache-control: only-if-cached
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;서버가 사용가능한 캐싱 응답 디렉티브다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cache-control: must-revalidate
Cache-control: no-cache
Cache-control: no-store
Cache-control: no-transform
Cache-control: public
Cache-control: private
Cache-control: proxy-revalidate
Cache-Control: max-age=&amp;lt;seconds&amp;gt;
Cache-control: s-maxage=&amp;lt;seconds&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;directive&quot;&gt;Directive&lt;/h4&gt;

&lt;h5 id=&quot;cacheability&quot;&gt;Cacheability&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;directive&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;public&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;어떤 요청에 대해서든 캐싱한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;private&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;타인과 공유되는 프록시 서버에는 캐싱하지 않는다. end-user에만 브라우저에 캐싱한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;no-cache&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;캐싱된 값을 사용하기 위해선 반드시 서버에서 유효한지 확인해야한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;no-store&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;어떤 요청도 캐시로 저장하지 않는다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;expiration&quot;&gt;Expiration&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;directive&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;max-age=&lt;seconds&gt;&lt;/seconds&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;신선도(?)를 설정한다. 이는 캐시가 언제 생성됐는지와 연관있으며 이 후에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;304 Modifed&lt;/code&gt;를 받아야만 사용가능하다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Expires&lt;/code&gt;와는 다르게 상대 시간을 설정한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;max-stale[=&lt;seconds&gt;]&lt;/seconds&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Indicates the client will accept a stale response. An optional value in seconds indicates the upper limit of staleness the client will accept.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;min-fresh=&lt;seconds&gt;&lt;/seconds&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Indicates the client wants a response that will still be fresh for at least the specified number of seconds.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;revalidation-and-reloading&quot;&gt;Revalidation and reloading&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;directive&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;must-revalidate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;리소스가 오래됐을 경우 캐시가 반드시 원 서버의 유효성 검사이후 사용해야한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;proxy-revalidate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;must-revalidate&lt;/code&gt;와 비슷하지만 공유 캐시에 이용된다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;immutable&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Indicates that the response body will not change over time. The resource, if unexpired, is unchanged on the server and therefore the client should not send a conditional revalidation for it (e.g. If-None-Match or If-Modified-Since) to check for updates, even when the user explicitly refreshes the page. Clients that aren’t aware of this extension must ignore them as per the HTTP specification. In Firefox, immutable is only honored on https:// transactions. For more information, see also this blog post.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;other&quot;&gt;Other&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;directive&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;no-transform&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;중간 캐시 혹은 프록시가 응답 본문, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Encoding&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Range&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cotent-Type&lt;/code&gt;을 수정할 수 없다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;connection&quot;&gt;Connection&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Connection&lt;/code&gt; 헤더는 클라이언트와 서버의 연결방식을 설정하는 헤더다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP/1.1&lt;/code&gt;에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keep-alive&lt;/code&gt;가 디폴트다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP/2&lt;/code&gt;에선 아예 사라져버렸다. 사실상 의미가 없다는 이야기를 들었다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Connection: keep-alive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;date&quot;&gt;Date&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt;가 만들어진 시각. 자동으로 생성된다.&lt;/p&gt;

&lt;p&gt;모든 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt;는 타임스탬프를 반드시 가지고 있어야 하며, 기준은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Greenwich Mean Time(GMT)&lt;/code&gt;이다. 아래 세 가지 템플릿을 허용하니 알아두자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Sun, 06 Nov 1994 08:49:37 GMT  ; RFC 822, updated by RFC 1123
Sunday, 06-Nov-94 08:49:37 GMT ; RFC 850, obsoleted by RFC 1036
Sun Nov  6 08:49:37 1994       ; ANSI C's asctime() format
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pragma&quot;&gt;Pragma&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pragma&lt;/code&gt;는 캐시제어 (no-cache), HTTP/1.0에서 쓰던 것으로 HTTP/1.1에서는 Cache-Control이 쓰인다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Pragma: no-cache
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;transfer-encoding&quot;&gt;Transfer-Encoding&lt;/h3&gt;

&lt;p&gt;발신자와 수신자 사이에 안전한 메세지 압축을 위해 본문 내용의 압축 방식을 지정한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chunked&lt;/code&gt;면 본문 내용이 동적으로 생성되어 길이를 모르기 때문에 나눠서 보낸다는 의미다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Transfer-Encoding: chunked
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;trailer&quot;&gt;Trailer&lt;/h3&gt;

&lt;p&gt;트레일러 헤더는 메세지 무결성 검사, 디지털 서명 또는 처리 상태와 같이 메세지 본문이 전송되는 동안 생성될 수 있는 메타데이터를 제공하기 위해 보낸 사람이 chunked 된 메세지의 끝에 추가 필드를 포함시킬 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;upgrade&quot;&gt;Upgrade&lt;/h3&gt;

&lt;p&gt;프로토콜 변경을 위해 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;via&quot;&gt;Via&lt;/h3&gt;

&lt;p&gt;중계 프록시 서버의 이름, 버전, 호스트 명을 나타낸다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;warning&quot;&gt;Warning&lt;/h3&gt;

&lt;p&gt;메세지에 반영되지 않은 상태 또는 압축에 대한 추가적인 정보를 보내기 위해 사용한다. 응답은 하나 이상의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Waring header&lt;/code&gt;를 보낸다.&lt;/p&gt;

&lt;h2 id=&quot;request-headers&quot;&gt;Request headers&lt;/h2&gt;

&lt;h3 id=&quot;accept&quot;&gt;Accept&lt;/h3&gt;

&lt;p&gt;클라이이언트가 응답에서 처리가능한 모든 미디어 타입을 명시한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Accept: type/subtype [q=qvalue]

Accept: text/plain; q=0.5, text/html, text/x-dvi; q=0.8, text/x-c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qvalue&lt;/code&gt;는 0과 1사이 스케일 값을 가지며, 허용가능한 미디어 타입의 퀄리티 레벨을 표시한다.&lt;/p&gt;

&lt;h3 id=&quot;accept-charset&quot;&gt;Accept-charset&lt;/h3&gt;

&lt;p&gt;클라이언트가 지원가능한 문자열 인코딩 방식을 명시한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Accept-Charset: character_set [q=qvalue]

Accept-Charset: iso-8859-5, unicode-1-1; q=0.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qvalue&lt;/code&gt;는 0과 1사이 스케일 값으로 선호되지 않는 문자열 집합에 대해 허용되는 품질 수준을 나타낸다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; 와일드 카드가 존재 시 모든 인코딩 방식을 허용하고, 위 헤더가 존재하지 않을 시 기본값이다.&lt;/p&gt;

&lt;h3 id=&quot;accept-encoding&quot;&gt;Accept-Encoding&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Accept&lt;/code&gt;와 비슷하지만 클라이언트가 해석가능한 압축 방식을 지정.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Accept-Encoding: compress, gzip
Accept-Encoding:
Accept-Encoding: *
Accept-Encoding: compress;q=0.5, gzip;q=1.0
Accept-Encoding: gzip;q=1.0, identity; q=0.5, *;q=0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;accept-language&quot;&gt;Accept-Language&lt;/h3&gt;

&lt;p&gt;클라이언트가 지원가능한 언어를 나열한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Accept-Language: language [q=qvalue]

Accept-Language: da, en-gb;q=0.8, en;q=0.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qvalue&lt;/code&gt;는 비선호 언어에 대한 스케일을 0과 1사이로 나타낸다.&lt;/p&gt;

&lt;h3 id=&quot;authorization&quot;&gt;Authorization&lt;/h3&gt;

&lt;p&gt;토큰 기반 엑세스를 지원하는 경우 위 헤더를 통해 토큰을 보낸다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Authorization: BASIC Z3Vlc3Q6Z3Vlc3QxMjM=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;cookie&quot;&gt;Cookie&lt;/h3&gt;

&lt;p&gt;쿠키 값을 보내며 key-value로 표현된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cookie: name1=value1;name2=value2;name3=value3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;expect&quot;&gt;Expect&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Expect&lt;/code&gt;는 클라이언트가 요구하는 특정 서버 동작을 나타낸다.&lt;/p&gt;

&lt;p&gt;서버가 지원하지 않는 방식의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Expect&lt;/code&gt; 헤더를 전달받았을 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;417 Expaectation Failed&lt;/code&gt;를 전송한다.&lt;/p&gt;

&lt;h3 id=&quot;host&quot;&gt;Host&lt;/h3&gt;

&lt;p&gt;요청하려는 서버 호스트 이름과 포트 번호를 나타낸다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /pub/WWW/ HTTP/1.1
Host: www.w3.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;명시하지 않을 경우 default로 80 포트를 설정한다.&lt;/p&gt;

&lt;h3 id=&quot;if-match&quot;&gt;If-Match&lt;/h3&gt;

&lt;p&gt;The If-Match request-header field is used with a method to make it conditional. This header requests the server to perform the requested method only if the given value in this tag matches the given entity tags represented by ETag. The general syntax is:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;If-Match : entity-tag
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;An asterisk (*) matches any entity, and the transaction continues only if the entity exists. Following are possible examples:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;If-Match: &quot;xyzzy&quot;
If-Match: &quot;xyzzy&quot;, &quot;r2d2xxxx&quot;, &quot;c3piozzzz&quot;
If-Match: *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;if-modifed-since&quot;&gt;If-Modifed-Since&lt;/h3&gt;

&lt;p&gt;현재 필드에 입력된 값 이후로 수정되지 않았다면 본문 없는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;304 not modified&lt;/code&gt;를 서버에서 전송한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;proxy-authorization&quot;&gt;Proxy-Authorization&lt;/h3&gt;

&lt;p&gt;인증을 필요로 하는 프록시에게 권한을 포함한 값을 전달.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Proxy-Authorization : credentials
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;referer&quot;&gt;Referer&lt;/h3&gt;

&lt;p&gt;이 페이지 이전 페이지 주소가 담겨있다. 이 헤더를 사용하면 페이지 이동에 대해 확인 가능하다. 보통 데이터 애널리스틱스 같은 데 많이 사용한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CORS&lt;/code&gt; 관련해서 이 헤더를 사용하는 방법을 해결 방법으로 제시하긴 하는데, 헤더를 조작하는 방법이 존재해 그렇게 큰 의미를 가지지 않는 것으로 안다.&lt;/p&gt;

&lt;h3 id=&quot;user-agent&quot;&gt;User-Agent&lt;/h3&gt;

&lt;p&gt;클라이언트 프로그램 정보를 나타낸다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;response-headers&quot;&gt;Response headers&lt;/h2&gt;

&lt;h3 id=&quot;access-control-allow-origin&quot;&gt;Access-Control-Allow-Origin&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/backend/2020-11-27-CORS&quot;&gt;여기로 이동&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;age&quot;&gt;Age&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max-age&lt;/code&gt; 시간내 얼마나 지났는지를 나타내는 추정치&lt;/p&gt;

&lt;h3 id=&quot;location&quot;&gt;Location&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;300&lt;/code&gt;번대 응답 혹은  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;201 Created&lt;/code&gt; 상태 코드일 때 볼 수 있는 헤더로 서버가 응답이 다른 곳에 있다고 알려주며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URI&lt;/code&gt;를 지정함.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Location: http://www.tutorialspoint.org/http/index.htm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;server&quot;&gt;Server&lt;/h3&gt;

&lt;p&gt;웹 서버의 종류를 나타낸다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Server: Apache/2.2.14 (Win32)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;set-cookie&quot;&gt;Set-Cookie&lt;/h3&gt;

&lt;p&gt;이름-밸류 쌍의 형식으로 되어있으며, 쿠키를 설정한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Set-Cookie: name1=value1,name2=value2; Expires=Wed, 09 Jun 2021 10:18:14 GMT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;옵션은 아래와 같다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;options&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Comment=comment&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;쿠키와 관련된 코멘트 작성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Domain=domain&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;쿠키가 유효한 도메인을 명시&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Expires=Date-time&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;쿠키 만료시간을 나타냄. 만약 공백일 경우 방문자가 나갈경우 쿠키가 만료됨.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Path=path&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;쿠키가 사용될 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL Path&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Secure&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secure connection&lt;/code&gt; 밑에 있을 경우에만 사용가능한&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;proxy-authenticate&quot;&gt;Proxy-Authenticate&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;407 Proxy Authentication Required&lt;/code&gt;와 함께 나타나며 요청한 서버가 프록시 서버인 겨웅 유저 인증을 위한 값을 나타낸다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Proxy-Authenticate  : challenge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;www-authenticate&quot;&gt;WWW-Authenticate&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;401 Unauthorized&lt;/code&gt;와 관려있으며 사용자 인증이 필요한 자원을 요구할 시, 서버가 제공하는 인증방식.&lt;/p&gt;

&lt;h2 id=&quot;entity-headers&quot;&gt;Entity headers&lt;/h2&gt;

&lt;h3 id=&quot;allow&quot;&gt;Allow&lt;/h3&gt;

&lt;p&gt;허용 가능한 메소드를 명시한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Allow: GET, HEAD, PUT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;content-encoding&quot;&gt;Content-Encoding&lt;/h3&gt;

&lt;p&gt;컨텐츠 압축 방식이다. 응답 컨텐츠를  br, gzip, deflate 등의 알고리즘으로 압축해서 보내면 브루아주거 알아서 해제 후 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Content-Encoding: gzip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;content-language&quot;&gt;Content-Language&lt;/h3&gt;

&lt;p&gt;사용자의 언어를 뜻 한다. 응답이 무슨 언어인지와는 관련이 없다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Content-Language: mi, en
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;content-length&quot;&gt;Content-Length&lt;/h3&gt;

&lt;p&gt;요청과 응답 메세지의 본문 크기를 나타낸다. 자동으로 만들어짐.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Content-Length: 3495
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;content-md5&quot;&gt;Content-MD5&lt;/h3&gt;

&lt;p&gt;메세지 무결성을 위해 포함하며, 해싱한 값이다&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Content-MD5  : 8c2d46911f3f5a326455f0ed7a8ed3b3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;content-type&quot;&gt;Content-Type&lt;/h3&gt;

&lt;p&gt;컨텐츠의 타입과 문자열 인코딩을 명시할 수 있다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Accept&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Accept-Charset&lt;/code&gt;과 대응된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Content-Type: text/html; charset=ISO-8859-4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;expires&quot;&gt;Expires&lt;/h3&gt;

&lt;p&gt;지원의 만료 일자. 응답이 신선하지 않은지를 확인할 수 있는 기준.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Expires: Thu, 01 Dec 1994 16:00:00 GMT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;last-modified&quot;&gt;Last-Modified&lt;/h3&gt;

&lt;p&gt;최근에 수정된 날짜를 나타낸다.&lt;/p&gt;

&lt;p&gt;현재 리소스가 수정된 날짜를 나타낸다. 여러 버전의 같은 리소스를 비교할 때 사용.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETag&lt;/code&gt; 보단 부정확하지만, 계산이 쉽다.&lt;/p&gt;

&lt;h1 id=&quot;마무리하며&quot;&gt;마무리하며..&lt;/h1&gt;

&lt;p&gt;헤더를 작성 후 다른 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; 관련 포스트를 작성했을 때 더 빠른 이해를 돕지 않을까 싶다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CORS&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cache&lt;/code&gt; 관련한 섹션은 따로 빼서 포스트를 작성할 것이다. 수정이 안 되어 있다면 작성자가 게으른 것.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;font size=&quot;6&quot;&gt;Refernce&lt;/font&gt;
  &lt;ul&gt;
    &lt;li&gt;https://feel5ny.github.io/2019/10/05/HTTP_007-2/#cacheflow&lt;/li&gt;
    &lt;li&gt;http://www.ktword.co.kr/abbr_view.php?m_temp1=3790&lt;/li&gt;
    &lt;li&gt;https://developer.mozilla.org/ko/docs/Web/HTTP/CORS&lt;/li&gt;
    &lt;li&gt;https://www.tutorialspoint.com/http/http_header_fields.htm&lt;/li&gt;
    &lt;li&gt;https://www.zerocho.com/category/HTTP/post/5b3ba2d0b3dabd001b53b9db&lt;/li&gt;
    &lt;li&gt;https://feel5ny.github.io/2019/10/05/HTTP_007-2/&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>조원빈</name></author><category term="backend" /><category term="backend" /><category term="HTTP" /><category term="network" /><category term="header" /><summary type="html">Introduction</summary></entry><entry><title type="html">동기, 비동기, 블록킹 그리고 논 블록킹</title><link href="http://localhost:4000/js/Blocking_NonBlocking_Synchronous_Asynchronous/" rel="alternate" type="text/html" title="동기, 비동기, 블록킹 그리고 논 블록킹" /><published>2020-11-28T00:00:00+09:00</published><updated>2020-11-27T04:00:00+09:00</updated><id>http://localhost:4000/js/Blocking_NonBlocking_Synchronous_Asynchronous</id><content type="html" xml:base="http://localhost:4000/js/Blocking_NonBlocking_Synchronous_Asynchronous/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;최근 꽤나 오래 일을 해오신 개발자 분도 둘의 차이를 모르는 것 같아 놀랐다. 꼭 구분해야할 것이라곤 생각 안 하지만 말의 미묘한 차이는 커뮤니케이션에도 치명적일 수 있으니 한 번 정리해보자.&lt;/p&gt;

&lt;p&gt;이번 포스트 주제는 말은 비슷해 보이지만 뭔가 다른 두 쌍에 대해 알아보자.&lt;/p&gt;

&lt;h1 id=&quot;blockingnon-blocking&quot;&gt;Blocking/Non-Blocking&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blocking&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;non-blocking&lt;/code&gt; 호출되는 함수가 바로 리턴하는가에 차이다.&lt;/p&gt;

&lt;p&gt;호출된 함수가 바로 리턴해서 호출한 함수에게 제어권을 넘겨주고 호출한 함수가 다른일을 할 수 있는 기회를 줄 수 있으면, 논블록킹이다.&lt;/p&gt;

&lt;p&gt;그렇지 않고 호출된 함수가 자신의 작업을 모두 마칠 때까지 호출한 함수에게 제어권을 넘겨주지 않고 대기하게 만든다면 블록킹이다.&lt;/p&gt;

&lt;h1 id=&quot;synchronousasynchronous&quot;&gt;Synchronous/Asynchronous&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Synchronous&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Asynchronous&lt;/code&gt;는 호출되는 함수의 작업 완료 여부를 누가 신경쓰는가에 차이다.&lt;/p&gt;

&lt;p&gt;호출되는 함수에게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;callback&lt;/code&gt;을 전달해서 호출되는 함수의 작업이 완료되면, 전달받은 callback을 실행하고, 호출하는 함수는 작업 완료 여부를 신경쓰지 않으면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Asynchronous&lt;/code&gt;다.&lt;/p&gt;

&lt;p&gt;호출하는 함수가 호출되는 함수의 작업 완료 후 리턴을 기다리거나 호출되는 함수로부터 바로 리턴 받더라도 작업 완료 여부를 호출하는 함수 스스로 계속 스스로 확인하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Synchronous&lt;/code&gt;다.&lt;/p&gt;

&lt;h1 id=&quot;blocking-with-synchronous-non-blocking-with-asynchronous&quot;&gt;Blocking with Synchronous, Non-Blocking with Asynchronous&lt;/h1&gt;

&lt;p&gt;이와 같이 묶인 조합은 상당히 비슷한 동작을 진행하는 둘이기에 이해가 쉽다. 아래 그림을 참조하자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ibm-devwokrs-2x2matrix.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;non-blocking-with-synchronous&quot;&gt;Non-Blocking with Synchronous&lt;/h1&gt;

&lt;p&gt;위에 정의대로라면 호출된 함수는 바로 리턴을 하지만, 호출한 함수가 작업 완료여부를 계속해서 확인하는 것이다. 작업 완료 전까지는 호출한 함수가 계속해서 물으며 진행은 못하지만 또 다른 작업을 진행할 수는 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/nonblocking_with_sync.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;blocking-with-asynchronous&quot;&gt;Blocking with Asynchronous&lt;/h1&gt;

&lt;p&gt;위에 정의대로라면 호출된 함수는 바로 리턴하지 않지만, 이에 대한 완료여부를 호출한 함수가 신경쓰지 않는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blocking_with_sync.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;참고한 블로그에서는 이에대한 예시로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node.js&lt;/code&gt;의 조합을 언급했다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node.js&lt;/code&gt; 쪽에서 callback 지옥을 헤치면서 Async로 전진해와도, 결국 DB 작업 호출 시에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;에서 제공하는 드라이버를 호출하게 되는데, 이 드라이버가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Blocking&lt;/code&gt; 방식이라고 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Blocking-Async는 별다른 장점이 없어서 일부러 사용할 필요는 없지만, NonBlocking-Async 방식을 쓰는데 그 과정 중에 하나라도 Blocking으로 동작하는 놈이 포함되어 있다면 의도하지 않게 Blocking-Async로 동작할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;font size=&quot;6&quot;&gt;Refernce&lt;/font&gt;
  &lt;ul&gt;
    &lt;li&gt;http://homoefficio.github.io/2017/02/19/Blocking-NonBlocking-Synchronous-Asynchronous/&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>조원빈</name></author><category term="js" /><category term="os" /><category term="sync" /><summary type="html">Introduction</summary></entry><entry><title type="html">Node.js 이벤트 루프</title><link href="http://localhost:4000/nodejs/node_event_loop/" rel="alternate" type="text/html" title="Node.js 이벤트 루프" /><published>2020-11-28T00:00:00+09:00</published><updated>2020-11-27T04:00:00+09:00</updated><id>http://localhost:4000/nodejs/node_event_loop</id><content type="html" xml:base="http://localhost:4000/nodejs/node_event_loop/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node.js&lt;/code&gt;를 통해 개발하면서 사용할 줄만 알았지 제대로 된 개념하나 안 잡힌 것 같아 포스트를 작성한다. 이벤트 루프에 대해 알아보자. 블로그에서 최근 작성한 글 중에서 가장 긴 글이 되지 않을까 싶다.&lt;/p&gt;

&lt;h1 id=&quot;event-loop&quot;&gt;Event Loop&lt;/h1&gt;

&lt;p&gt;자바스크립트는 알다 싶이 단일 스레드 기반의 언어다. 단일 쓰레드라는 의미는 들어오는 작업에 대해 순차적으로, 동시성을 지원하지 못하는 순차적인 실행 구조를 가졌다는 의미다.&lt;/p&gt;

&lt;p&gt;하지만, 우리는 JS로 비동기와 관련된 여러 기능들을 자유롭게 사용할 수 있다. 이는 어떻게 가능한 것일까?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이때 등장하는 개념이 바로 ‘이벤트 루프’이다. Node.js를 소개할 때 ‘이벤트 루프 기반의 비동기 방식으로 Non-Blocking IO를 지원하고..’ 와 같은 문구를 본 적이 있을 것이다. 즉, 자바스크립트는 이벤트 루프를 이용해서 비동기 방식으로 동시성을 지원한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;structure&quot;&gt;Structure&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/event_loop_node_js.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이벤트 루프에 대해 알아보기 위해, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node.js&lt;/code&gt; 내부로 들어가보려 한다. 보다 자세한 설명은 너무나도 친절하게 쓰여진 &lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/&quot;&gt;공식문서&lt;/a&gt;에서 확인할 수 있다. 시간이 남는다면 읽는 것을 추천한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node.js&lt;/code&gt; 이벤트 루프에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phase&lt;/code&gt; 단위로 나뉘어져 있다. 이벤트 루프를 쉽게 설명하기 위해 하나의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Queue&lt;/code&gt;만을 사용한 그림 등을 본적이 있겠지만, 이는 너무 포괄적인 개요가 아닌가 싶다.&lt;/p&gt;

&lt;p&gt;각 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phase&lt;/code&gt;는 저마다 특정 작업을 실행하며, 콜백을 저장하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIFO Queue&lt;/code&gt;를 가지고 있다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;idle, prepare&lt;/code&gt; 페이즈를 제외한 어느 단계에서나 자바스크립트 실행이 일어나며, 특정 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phase&lt;/code&gt;에 존재하는 대기열을 모두 소진하거나 그 페이즈에서 실행할 수 있는 콜백의 최대 수를 넘었을 경우에 다음 페이즈로 진행한다.&lt;/p&gt;

&lt;h2 id=&quot;phases-overview&quot;&gt;Phases Overview&lt;/h2&gt;

&lt;h3 id=&quot;timers&quot;&gt;timers&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setInterval&lt;/code&gt;에 의해 스케쥴된 콜백을 실행하는 페이즈다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;은 만료 후 가능한한 빨리 실행되어야 하는 콜백을 가진다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delay&lt;/code&gt;를 파라미터로 줄 수 있다. 여기서 알아둬야할 것은 딜레이를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0ms&lt;/code&gt;로 줄 수 없다는 것이다. 내부적으로 타이머의 최소단위를 지정하기 때문에 그 최소단위만큼 지난 후에 태스크 큐에 추가된다.&lt;/p&gt;

&lt;p&gt;“즉시”라는 의미를 충족시키기 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setImmediate&lt;/code&gt;가 제안되었다. 현재 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Poll phase&lt;/code&gt;가 끝난 뒤 즉시 시작하도록 설계된 함수다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setImmediate&lt;/code&gt;는 안타깝게도 표준 반열에 오르지 못하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IE10&lt;/code&gt; 이상에만 포함되었는데, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node&lt;/code&gt;에는 이런 용도를 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nextTick&lt;/code&gt;라는 함수가 존재한다. 자세한 내용은 추후 설명하겠다.&lt;/p&gt;

&lt;h3 id=&quot;pending-callbacks&quot;&gt;pending callbacks&lt;/h3&gt;

&lt;p&gt;이전 루프에서 연기된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I/O callback&lt;/code&gt;을 실행한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending_queue&lt;/code&gt; 들어와 있는 콜백들은 현재 돌고 있는 루프 이전에 한 작업에서 이미 큐에 들어왔던 콜백이다. 예를들어 TCP 핸들러 콜백 함수에서 파일에뭔가 썼다면, TCP 통신과 파일 쓰기가 종료 후 파일 쓰기에 대한 콜백이 이 큐에 들어오는 것이다.&lt;/p&gt;

&lt;p&gt;또한, 에러 콜백도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending_queue&lt;/code&gt;에 들어온다.&lt;/p&gt;

&lt;h3 id=&quot;idle-prepare&quot;&gt;idle, prepare&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#phases-overview&quot;&gt;내부적으로 사용한다.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;poll-phase&quot;&gt;Poll phase&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I/O 콜백&lt;/code&gt;을 허용한다. 예로들면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs.readFile&lt;/code&gt;에 넘겨준 콜백인자가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I/O&lt;/code&gt; 작업이 끝난 후에 실행된다.&lt;/p&gt;

&lt;p&gt;평소에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Poll queue(watcher_queue)&lt;/code&gt;가 비어있다면, 곧바로 페이즈로 넘어가는 것이 아니라 약간에 대기시간을 가지고 콜백이 들어오면 바로 실행한다.&lt;/p&gt;

&lt;p&gt;이 대기시간은 아래서 설명하겠지만, 기준은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Timer queue&lt;/code&gt;에 콜백의 존재 유무다.&lt;/p&gt;

&lt;h3 id=&quot;check-phase&quot;&gt;Check phase&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setImmediate&lt;/code&gt;만을 위한 페이즈다. 추후 설명하겠다.&lt;/p&gt;

&lt;h3 id=&quot;close-callbacks&quot;&gt;Close callbacks&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;socket.on('close', () =&amp;gt;{})&lt;/code&gt;과 같은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close&lt;/code&gt; 이벤트 타입의 헨들러가 여기서 처리된다.&lt;/p&gt;

&lt;h2 id=&quot;microtasks-nexttick&quot;&gt;Microtasks, NextTick?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microtasks&lt;/code&gt;란 다음 페이즈로 넘어가기 전에 반드시 실행되어야 할 콜백이다. 예로는 프로미스의 Resolve된 콜백이 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nextTick&lt;/code&gt; 0.9버전 이상의 노드에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microtasks&lt;/code&gt;를 이용하도록 변경되었다. 자세한 설명은 이 포스트에서 하긴 어려울 것 같다. &lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#process-nexttick&quot;&gt;공식문서&lt;/a&gt;에서 확인하길 바란다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같은 콜백을 담당하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Queue&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nextTickQueue와&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;microTaskQueue&lt;/code&gt;라 불린다.&lt;/p&gt;

&lt;p&gt;위에 나온 그림에서도 얼핏 눈치챘을지 모르지만, 위 둘은 이벤트 루프에 일부가 아니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libUV&lt;/code&gt; 라이브러리에 포함된 것이 아닌 노드에 포함된 기술이라는 의미다.&lt;/p&gt;

&lt;p&gt;위 큐에 적재되어있는 작업은 반드시 현재 작업이 끝나자마자 바로 호출되어야 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;libUV는 Node.js에서 사용하는 비동기 I/O 라이브러리이다. 이 라이브러리는 C로 작성되었고 윈도우나 리눅스 커널을 추상화해서 Wrapping하고 있는 구조이다. 즉, 커널에서 어떤 비동기 작업들을 지원해주는 지 알고 있기 때문에 커널을 사용하여 처리할 수 있는 비동기 작업을 발견하면 바로 커널로 작업을 넘겨버린다.
&lt;br /&gt;
이후 이 작업들이 종료되어 OS 커널로부터 시스템 콜을 받으면 이벤트 루프에 콜백을 등록하는 것이다. 만약 OS 커널이 지원하지 않는 작업일 경우 별도의 스레드에 작업을 던져서 처리한다. 이 스레드에 관한 내용은 원작자가 밑에서 추가적으로 설명하고있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;microtasks와 일반 task, Scheduled와 관련해 인터랙션과 함께 잘 정리된 글이 있어 아래 링크를 남긴다. 이 포스트와 함께 읽는다면 좋을 것 같다. https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;event-loop-phases-in-more-detail&quot;&gt;Event loop phases in more detail&lt;/h2&gt;

&lt;p&gt;개요가 너무 길었다 자세하게 알아보자.&lt;/p&gt;

&lt;p&gt;우선 우리가 실행하려는 자바스크립트 파일 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.js&lt;/code&gt;을 보자. 콘솔에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node hello.js&lt;/code&gt;를 입력한다면 노드는 이벤트 루프를 생성 후 루프 바깥에서 메인 모듈인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.js&lt;/code&gt;를 실행한다. 한 번 메인 모듈이 실행된 후에 노드는 이벤트 루프에서 처리해야할 작업이 있다면 루프로 들어가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timer phase&lt;/code&gt;부터 시작한다. 만약 없다면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process.on('exit', foo)&lt;/code&gt; 종료 콜백을 실행한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/nodejs-event-loop-workflow.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;timer-phase&quot;&gt;Timer Phase&lt;/h3&gt;

&lt;p&gt;이벤트 페이즈가 타이머 페이즈에 들어가게 되면 실행할 타이머 콜백 큐를 탐색한다. 사실, 앞에서 각 페이즈에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIFO Queue&lt;/code&gt;가 존재한다 하였다. 이는 큐에 들어있는 작업의 포지션을 절대 변경하지 않는다는 것이다. 무조건 큐에 먼저 들어간 작업이 먼저 실행된다. 또한, 이를 실질적으로 감리감독하는 자료구조의 실체는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min heap&lt;/code&gt;이다.&lt;/p&gt;

&lt;p&gt;느슨한 순서로 저장된 자료구조 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min heap&lt;/code&gt;에서 특정 시점 콜백이 실행시간을 만족하는지 확인한다. 만약 만족하지 못할 경우 이후 콜백은 확인할 필요가 없다.(정렬되어 있으니)&lt;/p&gt;

&lt;h3 id=&quot;pending-io-phase&quot;&gt;Pending I/O Phase&lt;/h3&gt;

&lt;p&gt;타임 페이즈가 종료된 후 이벤트 루프는 펜딩 I/O 페이즈에 진입한다. 가장 먼저 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending queue&lt;/code&gt;에 이전 작업들의 콜백이 실행 대기 중인지 확인한다. 만약 실행 대기 중이라면, 대기열이 소진되거나 시스템의 실행 한도를 초과할 때까지 콜백을 실행한다. 이 과정이 종료되면 이벤트 루프는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Idle Handler Phase&lt;/code&gt;로 이동한 후 내부 처리를 위한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Prepare Phase&lt;/code&gt;를 거쳐 최종적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Poll Phase&lt;/code&gt;에 도달하게 된다.&lt;/p&gt;

&lt;h3 id=&quot;poll-phase-1&quot;&gt;Poll Phase&lt;/h3&gt;

&lt;p&gt;이 페이즈는 폴링을 진행하는 단계다. 이벤트 루프가 이 페이즈에 들어왔을 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;polling queue(watcher_queue)&lt;/code&gt; 내부파일 읽기에 대한 콜백, HTTP 응답 콜백과 같은 작업이 존재하며, 시스템 한도 내에서 이를 실행시킨다.&lt;/p&gt;

&lt;p&gt;만약 더 이상 실행할 콜백이 없다면,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check_queue&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending_queue&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;closing_callbacks_queue&lt;/code&gt;에 해야할 작업이 있는지를 검사하고, 만약 해야할 작업이 있다면 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Poll phase가&lt;/code&gt; 종료되고 다음 페이즈로 넘어가게 된다. 하지만 특별히 해야할 작업이 더 이상 없는 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Poll phase&lt;/code&gt;는 다음 페이즈로 넘어가지 않고 계속 대기하게 된다.&lt;/p&gt;

&lt;p&gt;대기시간에 제약은 아래 알고리즘을 따른다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Check Phase&lt;/code&gt;에 실행할 콜백이 있는가?&lt;/li&gt;
  &lt;li&gt;없다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Timer&lt;/code&gt;에 있는가? -&amp;gt; 타이머 페이즈가 실행 가능한 시간까지 대기 후 타이머 페이즈로 간다.&lt;/li&gt;
  &lt;li&gt;없다면 대기&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;check-phases&quot;&gt;Check Phases&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Poll Phase&lt;/code&gt;가 지나면 이벤트 루프의 다음 목적지로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API&lt;/code&gt; 콜백과 관련있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Check phase&lt;/code&gt;로 들어온다. 이 페이즈에선 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setImmediate&lt;/code&gt;의 콜백을 실행한다. 다른 페이즈와 마찬가지로 큐가 비거나 시스템 실행 한도 초과에 도달할 때까지 계속 해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setImmediate&lt;/code&gt; 콜백들을 실행한다.&lt;/p&gt;

&lt;h3 id=&quot;close-phase&quot;&gt;Close Phase&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close&lt;/code&gt;나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destroy&lt;/code&gt;를 관리하는 페이즈다.&lt;/p&gt;

&lt;p&gt;이벤트 루프가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Close callback&lt;/code&gt;들과 함께 종료하면, 이벤트 루프는 다음에 돌아야할 루프가 존재하는지 확인한다. 만약 아니라면 이벤트 루프는 종료하게 된다. 수행할 것이 남아있으면 이벤트 루프 순회를 돌며 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Timer phase&lt;/code&gt; 부터 다시 시작하게 된다.&lt;/p&gt;

&lt;h1 id=&quot;example&quot;&gt;Example&lt;/h1&gt;

&lt;h2 id=&quot;basic&quot;&gt;Basic&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setImmediate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;setImmediate&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;이 반드시 앞에 올거라는 확신을 할 수 있을까?&lt;/p&gt;

&lt;p&gt;타이머는 시스템 시간과 사용자 제공 시간을 사용하여 등록한다. 이는 어떤 의미일까? 좀 더 자세하게 이야기하면 타이머는 메모리에 현재 타이머를 저장하게 된다. 그 순간 컴퓨터 성능이나 다른 외부 작업에 의해 약간의 딜레이가 발생할 수 있는 것이다.&lt;/p&gt;

&lt;p&gt;또 다른 포인트는 노드가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Timer phase&lt;/code&gt;에 진입하기전에 변수 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;now&lt;/code&gt;를 선언하고 그 변수를 현재시간으로 간주한다는 점이다. 그러므로 정확한 계산이라고 하기에는 약간의 노이즈가 껴있고, 이게 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;이 반드시 먼저 실행될 것이라고 확신할 수 없는 불확실성의 이유가 된다.&lt;/p&gt;

&lt;p&gt;하지만, 아래와 같은 코드처럼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I/O 콜백&lt;/code&gt; 사이클 내부로 옮긴다면 반드시 순서를 보장할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;my-file-path.txt&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;setImmediate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;setImmediate&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;순서대로 코드가 실행되는 동작을 확인하겠다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs.readFile&lt;/code&gt;을 만나면 이벤트 루프는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libUV&lt;/code&gt;에게 해당 작업을 보낸다.&lt;/li&gt;
  &lt;li&gt;파일 읽기는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OS Kernel&lt;/code&gt;에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Asynchronous API&lt;/code&gt;를 제공하지 않기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libUV&lt;/code&gt;는 별도의 스레드에 해당 작업을 던진다.&lt;/li&gt;
  &lt;li&gt;작업이 완료되면 이벤트 루프는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pending I/O callback phase&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending_queue&lt;/code&gt;에 작업의 콜백을 등록한다.&lt;/li&gt;
  &lt;li&gt;이벤트 루프가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pending Phase&lt;/code&gt;를 지날 때 해당 콜백을 실행한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;의 콜백이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Timer Phase&lt;/code&gt; 큐에 등록된다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setImmediate&lt;/code&gt;의 콜백이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chekc Phase&lt;/code&gt;에 등록된다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setImmediate를&lt;/code&gt; 콘솔에 출력한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout을&lt;/code&gt; 콘솔에 출력한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;timer에-이해&quot;&gt;Timer에 이해&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;setImmediate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Execution time: &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 예시에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt;를 1000번 재귀호출한다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Execution time: &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout(foo, 0)&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setImmediate(foo)&lt;/code&gt;는 놀랍게도 시간차이가 상당하다. 어째서일까? 정답은 시간을 비교하고 편차를 알아내는 작업이 CPU 연산을 상대적으로 많이 사용하기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setImmediate&lt;/code&gt;는 이러한 작업이 필요없기 때문에 상대적으로 매우 빠르다.&lt;/p&gt;

&lt;h1 id=&quot;faq&quot;&gt;FAQ&lt;/h1&gt;

&lt;h2 id=&quot;이벤트-루프는-자바스크립트-엔진-내부에-있나&quot;&gt;이벤트 루프는 자바스크립트 엔진 내부에 있나?&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ECMAScript&lt;/code&gt;에는 이벤트 루프가 없다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ES6&lt;/code&gt;부터는 여러가지 지원하는 것들이 늘어났지만 기본적으로 자바스크립트 엔진 내부에 없으며, 이를 구동하는 환경인 웹브라우저나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node.js&lt;/code&gt;에서 담당한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/js_inner.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그림에서도 볼 수 있듯이 실제로 우리가 비동기 호출에 사용하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;과 같은 함수들이 엔진 내부가 아닌 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Web API&lt;/code&gt; 영역에 따로 정의되어 있다.&lt;/p&gt;

&lt;p&gt;예를들어 보자. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node.js&lt;/code&gt;는 비동기 지원을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libuv&lt;/code&gt;에서 제공하는 이벤트 루프를 통해 실현시켰다. 자바스크립트 엔진은 비동기 작업을 위해 내부 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API&lt;/code&gt;를 호출하고 내부에 존재하는 이벤트 루프를 통해 스케쥴 되고 실행되는 것이다.&lt;/p&gt;

&lt;h2 id=&quot;그래서-이벤트-루프는-어디서-실행되는데&quot;&gt;그래서 이벤트 루프는 어디서 실행되는데?&lt;/h2&gt;

&lt;p&gt;자바스크립트와 이벤트 루프는 다른 쓰레드를 통해 독립적으로 실행되는 것이 아니라. 이벤트 루프 자체에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;V8&lt;/code&gt; 혹은 다른 엔진을 사용하여 자바스크립트를 실행하는 것이다. 단 하나의 쓰레드를 사용하여 자바스크립트는 실행된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;실행 자체는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Synchronous&lt;/code&gt; 하며, 자바스크립트가 실행되지 않는다면 이벤트 루프 또한 진행되지 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;nexttickqueue과-microtaskqueue의-실행-시기는-언제인가&quot;&gt;nextTickQueue과 microTaskQueue의 실행 시기는 언제인가?&lt;/h2&gt;

&lt;p&gt;즉시 실행되기를 바라는 두 큐는 언제 실행될까?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/nodejs-event-loop-workflow.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IBM developer&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node.js&lt;/code&gt; 이벤트 루프에 대한 글에선 아래와 같이 설명하고 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Immediately after mainline finishes and after every phase of the event loop, the microtask callbacks run.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nextTickQueue&lt;/code&gt; 또한 마찬가지이며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nextTickQueue는&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;microTaskQueue&lt;/code&gt; 보다는 높은 우선 순위를 가지고 있다.&lt;/p&gt;

&lt;h1 id=&quot;글을-마치며&quot;&gt;글을 마치며..&lt;/h1&gt;

&lt;p&gt;오랜만에 좋은 블로그와 자료들을 찾아서 이를 나만의 방식으로 정리했다. 최근에 포스트를 단순히 옮겨적는 데에 치중했었는데 늘어졌던 자세를 바로잡는 기회가 되지 않았나 싶다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;font size=&quot;6&quot;&gt;Refernce&lt;/font&gt;
  &lt;ul&gt;
    &lt;li&gt;https://evan-moon.github.io/2019/08/01/nodejs-event-loop-workflow/&lt;/li&gt;
    &lt;li&gt;https://meetup.toast.com/posts/89&lt;/li&gt;
    &lt;li&gt;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/&lt;/li&gt;
    &lt;li&gt;https://developer.ibm.com/tutorials/learn-nodejs-the-event-loop/&lt;/li&gt;
    &lt;li&gt;https://www.voidcanvas.com/nodejs-event-loop&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>조원빈</name></author><category term="nodejs" /><category term="js" /><category term="event_loop" /><summary type="html">Introduction</summary></entry><entry><title type="html">시계열 데이터 관측</title><link href="http://localhost:4000/redis/redis_02/" rel="alternate" type="text/html" title="시계열 데이터 관측" /><published>2020-11-27T00:00:00+09:00</published><updated>2020-11-27T04:00:00+09:00</updated><id>http://localhost:4000/redis/redis_02</id><content type="html" xml:base="http://localhost:4000/redis/redis_02/">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;time-series&quot;&gt;Time Series&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;시계열(時系列, 영어: time series)은 일정 시간 간격으로 배치된 데이터들의 수열을 말한다. 시계열 해석(time series analysis)라고 하는 것은 이런 시계열을 해석하고 이해하는 데 쓰이는 여러 가지 방법을 연구하는 분야이다.
-wikipedia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;시계열 데이터는 다양한 분석방법에 쓰일 수 있으며, 아래는 이에 대한 예시이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Usage of specific words or terms in a newspaper over time&lt;/li&gt;
  &lt;li&gt;Minimum wage year-by-year&lt;/li&gt;
  &lt;li&gt;Daily changes in stock prices&lt;/li&gt;
  &lt;li&gt;Product purchases month-by-month&lt;/li&gt;
  &lt;li&gt;Climate changes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;많은 시계열 시스템이 빠르게 늘어나는 데이테셋을 저장하는 문제를 겪고있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;font size=&quot;6&quot;&gt;Refernce&lt;/font&gt;
  &lt;ul&gt;
    &lt;li&gt;Maxwell Dayvson Da Silva, Redis Essentials&lt;/li&gt;
    &lt;li&gt;https://ko.wikipedia.org/wiki/시계열&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>조원빈</name></author><category term="redis" /><category term="NoSQL" /><category term="database" /><category term="redis" /><category term="nodejs" /><category term="time-series" /><summary type="html"></summary></entry><entry><title type="html">그런 REST API로 괜찮은가.</title><link href="http://localhost:4000/backend/REST/" rel="alternate" type="text/html" title="그런 REST API로 괜찮은가." /><published>2020-11-27T00:00:00+09:00</published><updated>2020-11-27T04:00:00+09:00</updated><id>http://localhost:4000/backend/REST</id><content type="html" xml:base="http://localhost:4000/backend/REST/">&lt;h1 id=&quot;representaion-state-transfer&quot;&gt;REpresentaion State Transfer&lt;/h1&gt;

&lt;p&gt;1991년에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WWW&lt;/code&gt;이 출시된 이후 인터넷 정보를 어떻게 공유할 것인가에 대한 연구가 활발히 진행됐는데, 그 예로 가장 먼저 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt;라는 프로토콜이 만들어졌다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Roy T.Fielding&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REST&lt;/code&gt;의 창시자이며 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; 프로토콜 개발에 참여했던 연구진으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; 개발이후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP object model&lt;/code&gt;이란 이름의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REST&lt;/code&gt; 아키텍쳐를 발표했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Roy T.Fielding: “How do i improve HTTP without breaking the Web?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;rest-api&quot;&gt;REST API&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REST&lt;/code&gt; 아키텍쳐 스타일(제약조건의 집합)을 따르는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API&lt;/code&gt;이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REST&lt;/code&gt;는 아키텍쳐 스타일의 집합이기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hyper archittecture styles&lt;/code&gt;라고도 불린다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;client-server&lt;/li&gt;
  &lt;li&gt;stateless&lt;/li&gt;
  &lt;li&gt;cache&lt;/li&gt;
  &lt;li&gt;uniform interface&lt;/li&gt;
  &lt;li&gt;layered system&lt;/li&gt;
  &lt;li&gt;code-on-demand(Optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;대부분 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; 기반에서 사용할 경우 쉽게 지켜질 수 있는 부분이나, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uniform interface&lt;/code&gt;에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REST&lt;/code&gt; 조건을 지키기 매우 까다롭다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uniform interface&lt;/code&gt;는 클라이언트 혹은 서버가 변경된다 해서 상대방까지 업데이트를 해야하는 상황을 막기위해 반드시 충족되어야 하는 조건이다.
이를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;독립적 진화&lt;/code&gt;라 하며 아래는 오늘 날 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REST API&lt;/code&gt;라 불리우는 것들에게서 충족시키기 어려운 조건들이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;self-descriptive messages&lt;/li&gt;
  &lt;li&gt;hypermedia as the engine of application state(HATEOAS)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이를 잘 지키는 플랫폼은 현재 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Web&lt;/code&gt;이 있다.&lt;/p&gt;

&lt;h1 id=&quot;rest가-웹의-독립적-진화에-도움을-주었나&quot;&gt;REST가 웹의 독립적 진화에 도움을 주었나?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP에 지속적으로 영향을 줌&lt;/li&gt;
  &lt;li&gt;HOST 헤더 추가&lt;/li&gt;
  &lt;li&gt;길이 제한을 다루는 방법을 명시&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;414 UIL Too Long&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP/1.1&lt;/code&gt; 명세 최신판에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REST&lt;/code&gt;에 대한 언급이 들어감&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;rest-api는-반드시-따라야-하나&quot;&gt;REST API는 반드시 따라야 하나?&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Roy T.Fielding: “REST emphasizes evolvability to sustain an unconrollable system. If you think you have control over the system or aren’t interested in evolvability, don’t waste your time arguing about REST”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;api를-rest-api로-구현해보자&quot;&gt;API를 REST API로 구현해보자.&lt;/h1&gt;

&lt;h2 id=&quot;웹과-http-api에-차이점&quot;&gt;웹과 HTTP API에 차이점&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;웹 페이지&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;HTTP API&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Protocol&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;communication&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Human - Machine&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Machine - Machine&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Media Type&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTML&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;JSON&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML&lt;/code&gt;에 비해 불안전하다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML&lt;/code&gt;은 명세에 대해 해석 가능하며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self-descriptive&lt;/code&gt;하며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HATEOAS&lt;/code&gt;하다.&lt;/p&gt;

&lt;p&gt;그러면 우리는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt;을 통해 정보를 주고받는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API&lt;/code&gt; 환경에서 어떻게 해야 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REST&lt;/code&gt;에 대해 만족시킬 수 있을까?&lt;/p&gt;

&lt;h2 id=&quot;self-descriptive&quot;&gt;Self-descriptive&lt;/h2&gt;

&lt;h3 id=&quot;media-type을-정의한다&quot;&gt;Media type을 정의한다.&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;미디어 타입을 정의 후 문서로 정리한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IANA&lt;/code&gt;에 미디어 타입을 등록할 수 있다. 만든 문서를 미디어 타입의 명세로 등록한다.&lt;/li&gt;
  &lt;li&gt;이제 이 메세지를 보는 사람은 명세를 찾아갈 수 있으므로 이 메세지의 의미를 온전히 해석 가능하다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;profile&quot;&gt;Profile&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt;에 대한 정의를 문서로 작성한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Link&lt;/code&gt; 헤더에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;profile relation&lt;/code&gt;으로 해당 명세를 링크한다.&lt;/li&gt;
  &lt;li&gt;이제 메세지를 보는 사람은 명세를 찾아갈 수 있으므로 이 문서의 의미를 온전히 해석할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;클라이언트가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Link&lt;/code&gt; 헤더에 대한 명세를 이해해야하며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content negotiation&lt;/code&gt;을 할 수 없다.&lt;/p&gt;

&lt;h2 id=&quot;hateoas&quot;&gt;HATEOAS&lt;/h2&gt;

&lt;h3 id=&quot;data에-하이퍼링크를-추가한다&quot;&gt;data에 하이퍼링크를 추가한다.&lt;/h3&gt;

&lt;p&gt;이는 링크를 표현하는 방법을 직접 정의해야하는 단점이있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JSON API&lt;/li&gt;
  &lt;li&gt;HAL&lt;/li&gt;
  &lt;li&gt;UBER&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;등 이미 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt;에서 하이퍼 링크를 표현하는 방법을 정의한 명세를 활용할 수 있지만, 기존에 내가 구현했던 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API&lt;/code&gt;를 고쳐야하는 단점이 있다.&lt;/p&gt;

&lt;h3 id=&quot;http-헤더로-표현&quot;&gt;HTTP 헤더로 표현&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Link&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; 등의 헤더로 표현한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;font size=&quot;6&quot;&gt;Refernce&lt;/font&gt;
  &lt;ul&gt;
    &lt;li&gt;https://tv.naver.com/v/2292653&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>조원빈</name></author><category term="backend" /><category term="backend" /><category term="REST" /><summary type="html">REpresentaion State Transfer</summary></entry><entry><title type="html">CORS(작성중)</title><link href="http://localhost:4000/backend/CORS/" rel="alternate" type="text/html" title="CORS(작성중)" /><published>2020-11-27T00:00:00+09:00</published><updated>2020-11-30T04:00:00+09:00</updated><id>http://localhost:4000/backend/CORS</id><content type="html" xml:base="http://localhost:4000/backend/CORS/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node&lt;/code&gt; 개발할 때, 따로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CORS&lt;/code&gt;란 단어를 책에선 본 적은 있지만 제대로 다루지는 않았다 헤더에 와일드 카드를 추가하던가, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cors&lt;/code&gt; 모듈을 사용하여 가능한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URI&lt;/code&gt;를 설정하라는 것은 익히 알고 있었으나 그 속 내부까지 파고들어 가볼까 한다.&lt;/p&gt;

&lt;h1 id=&quot;cors란&quot;&gt;CORS란&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/CORS_principle.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cross Origin Resource Sharing(CORS)&lt;/code&gt;는 웹서버를 개발하다보면 자주 마주칠 수 있는 상황이다.&lt;/p&gt;

&lt;p&gt;이는 도메인 또는 포트가 다른 서버의 자원을 요청할 경우 보안상의 이유로 브라우저는 스크립트에서 시작한 교차 출처 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; 요청을 제한한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API&lt;/code&gt;를 사용하는 웹 애플리케이션은 자신의 출처와 동일한 리소스만 불러올 수 있으며, 다른 출처의 리소스를 불러오려면 그 출처에서 올바른 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CORS&lt;/code&gt; 헤더를 포함한 응답을 반환해야 한다.&lt;/p&gt;

&lt;p&gt;간단히 요약하자면 브라우저에서 서버로 하는 요청은 반드시 같은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Origin&lt;/code&gt;이어야 한다는 것이다.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CORS&lt;/code&gt; 표준은 웹 브라우저에서 해당 정보를 읽는 것이 허용된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Origin&lt;/code&gt;을 서버에서 설명할 수 있도록 새로운 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; 헤더를 추가한다.&lt;/p&gt;

&lt;p&gt;보통은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preflight&lt;/code&gt;를 우선 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPTIONS&lt;/code&gt; 메서드로 전달 후 서버에서 허가가 떨어졌을 경우 실제 요청을 보내도록 진행된다 . 필요한 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authenticate&lt;/code&gt;를 요청할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;cors를-사용하는-요청&quot;&gt;CORS를 사용하는 요청?&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CORS&lt;/code&gt; 표준은 다음과 같은 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; 요청을 허용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fetch API 호출&lt;/li&gt;
  &lt;li&gt;웹 폰트&lt;/li&gt;
  &lt;li&gt;WebGL 텍스쳐&lt;/li&gt;
  &lt;li&gt;drawImage()&lt;/li&gt;
  &lt;li&gt;이미지로부터 추출하는 CSS Shapes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;origin&quot;&gt;Origin?&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URI&lt;/code&gt;에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Path&lt;/code&gt; 이전 부분을 나타낸다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Origin&lt;/code&gt;은 페칭된 출처를 나타낸다. 쉽게 말하면 요청한 클라이언트가 어디서 요청했는지 그 위치를 알려준다.&lt;/p&gt;

&lt;p&gt;브라우저의 개발자 도구에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; 객체가 가진 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin&lt;/code&gt;의 프로퍼티에 접근하면 쉽게 그 값을 알아낼 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;console.log(location.origin);
VM76:1 https://lkic1625.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sopsame-origin-policy&quot;&gt;SOP(Same-Origin Policy)&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOP&lt;/code&gt;는 &lt;a href=&quot;https://tools.ietf.org/html/rfc6454#section-3&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RFC6454&lt;/code&gt;&lt;/a&gt;에서 처음 등장한 보안 정책으로 같은 출처에서만 리소스를 공유할 수 있다는 정책이다.&lt;/p&gt;

&lt;p&gt;하지만 웹 환경에서는 다른 출처의 리소스를 가져오는 일이 굉장히 흔하므로 예외 조항인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CORS&lt;/code&gt; 정책에 한해 출처가 다른 리소스를 허용했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Access to network resources varies depending on whether the resources are in the same origin as the content attempting to access them.&lt;br /&gt;&lt;br /&gt;
Generally, reading information from another origin is forbidden. However, an origin is permitted to use some kinds of resources retrieved from other origins. For example, an origin is permitted to execute script, render images, and apply style sheets from any origin. Likewise, an origin can display content from another origin, such as an HTML document in an HTML frame. Network resources can also opt into letting other origins read their information, for example, using Cross-Origin Resource Sharing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;same-origin&quot;&gt;Same Origin?&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Origin&lt;/code&gt;에서 가장 잘 알아둬야할 점은 같은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Origin&lt;/code&gt;을 구별하는 사항이 서버의 구현된 스펙이 아닌 브라우저에 구현된 스펙이라는 것이다. 브라우저마다 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IE&lt;/code&gt; 같은 경우는 포트가 달라도 호스트가 같다면 같은 출처로 보며, 포트마다 다른 출처라고 하는 브라우저도 존재한다.&lt;/p&gt;

&lt;p&gt;서버가 같은 출처에서 보낸 요청만 받겠다는 로직을 가지고 있는 경우가 아니라면 서버는 정상적으로 응답을 하고, 브라우저에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CORS&lt;/code&gt; 정책 위반이라고 판단하고 응답을 &lt;b&gt;폐기&lt;/b&gt;할 수 있다는 말이다.&lt;/p&gt;

&lt;p&gt;서버는 계속해서 정상적으로 응답한다고 뜨는데, 계속해서 오류가 나는 경우 디버깅이 매우 힘들 것이다. 따라서, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CORS&lt;/code&gt; 관련하여 제대로 알고 있는 것이 매우 중요하다.&lt;/p&gt;

&lt;h2 id=&quot;접근-제어-시나리오&quot;&gt;접근 제어 시나리오&lt;/h2&gt;

&lt;h3 id=&quot;simple-requests&quot;&gt;Simple requests&lt;/h3&gt;

&lt;p&gt;단순 요청은 서버간에 간단한 통신을 하고, 교차출처 전용 헤더(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt;)를 사용하여 권한을 처리한다.&lt;/p&gt;

&lt;p&gt;단순 요청은 매우 간편해 보이지만, 보안적으로 상당히 취약하므로 특정 상황에서만 가능하다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;요청의 메소드는 GET, HEAD, POST 중 하나여야 한다.&lt;/li&gt;
  &lt;li&gt;Accept, Accept-Language, Content-Language, Content-Type, DPR, Downlink, Save-Data, Viewport-Width, Width를 제외한 헤더를 사용하면 안된다.&lt;/li&gt;
  &lt;li&gt;만약 Content-Type를 사용하는 경우에는 application/x-www-form-urlencoded, multipart/form-data, text/plain만 허용된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;제약 조건을 알아봤으니 이제 직접 예제를 봐보자. 예를들어, https://foo.example 의 웹 컨텐츠가  https://bar.other 도메인의 컨텐츠를 호출하길 원할 때, foo.example에 배포된 자바스크립트에는 아래와 같은 코드가 사용될 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const xhr = new XMLHttpRequest();
const url = 'https://bar.other/resources/public-data/';

xhr.open('GET', url);
xhr.onreadystatechange = someHandler;
xhr.send();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/simple-req-updated.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Request
GET /resources/public-data/ HTTP/1.1
Host: bar.other
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,deflate
Connection: keep-alive
Origin: https://foo.example

Response
HTTP/1.1 200 OK
Date: Mon, 01 Dec 2008 00:23:53 GMT
Server: Apache/2
Access-Control-Allow-Origin: *
Keep-Alive: timeout=2, max=100
Connection: Keep-Alive
Transfer-Encoding: chunked
Content-Type: application/xml

[…XML Data…]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;요청 헤더에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Origin: https://foo.example&lt;/code&gt;과 응답 헤더의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access-Control-Allow-Origin: *&lt;/code&gt;이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Simple request&lt;/code&gt;의 핵심이며, 와일드카드(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;)를 사용할 경우 모든 경우의 교차출처를 허용하겠다는 의미다.&lt;/p&gt;

&lt;h3 id=&quot;preflight-request&quot;&gt;Preflight request&lt;/h3&gt;

&lt;p&gt;프리플라이트 요청은 앞에서 말한 단순 요청과 달리 먼저 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPTIONS&lt;/code&gt; 메서드를 통해 다른 도메인의 리소스 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; 요청이 가능한지 먼저 확인한다.&lt;/p&gt;

&lt;p&gt;요청시 유저에게 영향을 줄 수 있기 때문에 사전 전송을 통해 안전한지를 확인하는 작업이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/preflight_correct.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OPTIONS /resources/post-here/ HTTP/1.1
Host: bar.other
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,deflate
Connection: keep-alive
Origin: http://foo.example
Access-Control-Request-Method: POST
Access-Control-Request-Headers: X-PINGOTHER, Content-Type


HTTP/1.1 204 No Content
Date: Mon, 01 Dec 2008 01:15:39 GMT
Server: Apache/2
Access-Control-Allow-Origin: https://foo.example
Access-Control-Allow-Methods: POST, GET, OPTIONS
Access-Control-Allow-Headers: X-PINGOTHER, Content-Type
Access-Control-Max-Age: 86400
Vary: Accept-Encoding, Origin
Keep-Alive: timeout=2, max=100
Connection: Keep-Alive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPTIONS&lt;/code&gt; 메서드를 사용해 프리플라이트 요청을 날린 결과물이다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SAFE METHOD&lt;/code&gt;이기에 서버의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resource&lt;/code&gt;를 변경하지 않는다.&lt;/p&gt;

&lt;p&gt;프리플라이트 요청에서 주의깊게 살펴볼 부분은 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Access-Control-Request-Method: POST
Access-Control-Request-Headers: X-PINGOTHER, Content-Type
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access-Control-Request-Method: POST&lt;/code&gt;: 실제 요청에서 전송할 메서드를 알려준다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access-Control-Request-Headers: X-PINGOTHER, Content-Type&lt;/code&gt;: 실제 요청에서 이 헤더를 함께 전송한다는 의미다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이번엔 응답 부분을 살펴보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Access-Control-Allow-Origin: http://foo.example
Access-Control-Allow-Methods: POST, GET, OPTIONS
Access-Control-Allow-Headers: X-PINGOTHER, Content-Type
Access-Control-Max-Age: 8640
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Access-Control-Allow-Origin: http://foo.example: 요청 가능한 출처를 의미합니다.&lt;/li&gt;
  &lt;li&gt;Access-Control-Allow-Methods: POST, GET, OPTIONS: 요청 가능한 메서드를 의미한다.&lt;/li&gt;
  &lt;li&gt;Access-Control-Allow-Headers: X-PINGOTHER, Content-Type&lt;/li&gt;
  &lt;li&gt;Access-Control-Max-Age: 8640:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래는 이후 직접적인 교차 출처 요청, 응답 헤더이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /resources/post-here/ HTTP/1.1
Host: bar.other
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,deflate
Connection: keep-alive
X-PINGOTHER: pingpong
Content-Type: text/xml; charset=UTF-8
Referer: https://foo.example/examples/preflightInvocation.html
Content-Length: 55
Origin: https://foo.example
Pragma: no-cache
Cache-Control: no-cache

&amp;lt;person&amp;gt;&amp;lt;name&amp;gt;Arun&amp;lt;/name&amp;gt;&amp;lt;/person&amp;gt;


HTTP/1.1 200 OK
Date: Mon, 01 Dec 2008 01:15:40 GMT
Server: Apache/2
Access-Control-Allow-Origin: https://foo.example
Vary: Accept-Encoding, Origin
Content-Encoding: gzip
Content-Length: 235
Keep-Alive: timeout=2, max=99
Connection: Keep-Alive
Content-Type: text/plain

[Some GZIP'd payload]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;credentialed-request&quot;&gt;Credentialed request&lt;/h3&gt;

&lt;p&gt;인증정보를 포함한 요청은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP cookies&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP Authentication&lt;/code&gt; 정보를 인식 가능하다.&lt;/p&gt;

&lt;p&gt;요청 시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XMLHttpRequest&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch&lt;/code&gt;에 함부로 쿠키 정보나 인증과 관련된 헤더를 담을 수 없다. 이를 지원하게 해주는 것이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;credentials&lt;/code&gt; 옵션이다.&lt;/p&gt;

&lt;p&gt;예제를 보며 이야기하자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const invocation = new XMLHttpRequest();
const url = 'http://bar.other/resources/credentialed-content/';

function callOtherDomain() {
  if (invocation) {
    invocation.open('GET', url, true);
    invocation.withCredentials = true;
    invocation.onreadystatechange = handler;
    invocation.send();
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;7번째 줄을 확인해보면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XMLHttpRequest&lt;/code&gt;가 가지고 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withCredentials&lt;/code&gt;을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;로 변경했다.
이 프로퍼티는 기본적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;값을 가지는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boolean&lt;/code&gt; 타입이다.&lt;/p&gt;

&lt;p&gt;실제로, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access-Control-Allow-Credentials: true&lt;/code&gt;을 포함하지 않을 경우 브라우저는 현재 요청이 단순 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt;요청이므로 기각할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/cred-req-updated.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /resources/credentialed-content/ HTTP/1.1
Host: bar.other
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,deflate
Connection: keep-alive
Referer: http://foo.example/examples/credential.html
Origin: http://foo.example
Cookie: pageAccess=2


HTTP/1.1 200 OK
Date: Mon, 01 Dec 2008 01:34:52 GMT
Server: Apache/2
Access-Control-Allow-Origin: https://foo.example
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Set-Cookie: pageAccess=3; expires=Wed, 31-Dec-2008 01:34:53 GMT
Vary: Accept-Encoding, Origin
Content-Encoding: gzip
Content-Length: 106
Keep-Alive: timeout=2, max=100
Connection: Keep-Alive
Content-Type: text/plain


[text/plain payload]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;font size=&quot;6&quot;&gt;Refernce&lt;/font&gt;
  &lt;ul&gt;
    &lt;li&gt;https://developer.mozilla.org/ko/docs/Web/HTTP/CORS&lt;/li&gt;
    &lt;li&gt;https://evan-moon.github.io/2020/05/21/about-cors/&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>조원빈</name></author><category term="backend" /><category term="backend" /><category term="CORS" /><summary type="html">Introduction</summary></entry><entry><title type="html">Heavy-Light Decompostion(작성중)</title><link href="http://localhost:4000/algorithm/HLD/" rel="alternate" type="text/html" title="Heavy-Light Decompostion(작성중)" /><published>2020-11-23T00:00:00+09:00</published><updated>2020-11-27T05:00:00+09:00</updated><id>http://localhost:4000/algorithm/HLD</id><content type="html" xml:base="http://localhost:4000/algorithm/HLD/">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;오늘은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HLD&lt;/code&gt;에 대해 포스팅을 해보려 한다. 문제 유형이 한정적이고 어려운 테크닉에 속하기에 포스팅할까 망설였다.(어디다 쓰는 알고리즘인데 도대체) 대회 준비를 하는 것도 아니기에 기본적인 자료구조, 알고리즘을 지향하려 했지만, 최근에는 굳이 그럴 필요 있을까 생각한다.&lt;/p&gt;

&lt;p&gt;알고리즘은 기업 코테도 있다보니 겸사겸사 시작했지만, 요즘은 하나의 논리를 배우는 거라 생각한다. 우리는 개발을 하면서 언어에 대해 항상 문법만 배우지 말을 잘하는 법을 배우진 않는다. 논리적으로 말하지 않아도 의미만 잘 전달된다면 상관없을지도 모른다. 하지만, 직업 특성상 우리는 항상 효율적인 것을 생각한다. 논리를 배우는 건 필수적이지 않지만 달변가들이 많은 논리를 알고 있는 것은 어찌보면 당연하지 않을까?&lt;/p&gt;

&lt;p&gt;서론이 길어졌다. 바로 알고리즘에 대해 알아보자.&lt;/p&gt;

&lt;h1 id=&quot;heavy-light-decomposition&quot;&gt;Heavy-Light Decomposition&lt;/h1&gt;

&lt;p&gt;일반적인 그래프에서 정점 \(u\)에서 \(v\)로 가는 경로에 대한 문제는 풀기가 어렵고 제시할 수 있는 유형이 한정적이다. 트리에서 단순 경로는 반드시 하나 존재한다는 특성 떄문에 일반적인 경우에 비해 쉽게 접근할 수 있지만, 경로를 탐색하기 위해 트리 전체를 순회하는 결과를 야기한다. 또한, 정점이나 간선의 속성을 변경하는 작업일 경우엔 더욱이 효율적인 처리가 불가능에 가까워질 것이다.&lt;/p&gt;

&lt;p&gt;이를 해결할 수 있는 방법 중 하나가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HLD&lt;/code&gt;다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HLD&lt;/code&gt;는 트리를 정점 단위가 아닌 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chain&lt;/code&gt;단위로 분할하여 마치 1차원 배열의 묶음처럼 다룰 수 있게 해준다.&lt;/p&gt;

&lt;h2 id=&quot;문제-정의&quot;&gt;문제 정의&lt;/h2&gt;

&lt;p&gt;\(N\)개의 정점을 가진 트리가 있다고 하자. 이 때 임의의 두 정점에 대해 이들을 잇는 경로는 \(O(N)\)개의 간선을 가진다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Heavy light decomposition&lt;/code&gt;은 트리의 간선들을 적절히 일자 경로인 “묶음”들로 잘라, 임의의 두 간선 사이 경로를 \(O(\log N)\)개의 묶음으로 표현할 수 있게 해 준다. 이것을 세그먼트 트리 등의 일차원 자료 구조와 결합함으로써, 임의의 두 정점 사이의 경로에 대한 연산을 \(O(\log^2N)\)에 할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;그런데 특별한 제약 조건이 없는 그래프 문제의 경우 이 모델화에 성공하면 대체로 문제가 쉬워지거나, 전형적인 알고리즘을 요구하는 문제로 바뀌게 됩니다. 오히려 제약 조건이 추가된 형태일수록 그 조건에 의해 나타나는 특성을 코어까지 활용해야 하는 어려운 문제를 자주 마주치게 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1차원이라면&quot;&gt;1차원이라면?&lt;/h2&gt;

&lt;p&gt;알고스팟에서 이에 대한 기본적인 문제를 제공하지만, 나는 &lt;a href=&quot;https://www.acmicpc.net/problem/2927&quot;&gt;남극 탐험 - 2927&lt;/a&gt; 문제를 통해 예시를 풀어보려 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;font size=&quot;6&quot;&gt;Refernce&lt;/font&gt;
  &lt;ul&gt;
    &lt;li&gt;http://theyearlyprophet.com/heavy-light-decomposition.html&lt;/li&gt;
    &lt;li&gt;https://www.secmem.org/blog/2019/12/12/HLD/&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>조원빈</name></author><category term="algorithm" /><category term="algorithm" /><category term="traversal" /><category term="graph" /><category term="segment_tree" /><category term="lca" /><summary type="html"></summary></entry><entry><title type="html">레디스 콜렉션</title><link href="http://localhost:4000/redis/redis_01/" rel="alternate" type="text/html" title="레디스 콜렉션" /><published>2020-11-21T00:00:00+09:00</published><updated>2020-11-27T04:00:00+09:00</updated><id>http://localhost:4000/redis/redis_01</id><content type="html" xml:base="http://localhost:4000/redis/redis_01/">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;이번-포스트에서는&quot;&gt;이번 포스트에서는..&lt;/h1&gt;

&lt;p&gt;저번 포스트에서는 기본적인 데이터 타입을 설명했다. 이번 포스트에선 한발 더 나아가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sorted Set&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bitmap&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hyperloglog&lt;/code&gt; 데이터 타입을 살펴보려 한다.&lt;/p&gt;

&lt;p&gt;이 글은 &lt;a href=&quot;/database/redis_00&quot;&gt;레디스 기본 데이터 타입&lt;/a&gt; 포스트와 이어집니다.&lt;/p&gt;

&lt;h2 id=&quot;sets&quot;&gt;Sets&lt;/h2&gt;

&lt;p&gt;셋은 스트링과는 구분되는 순서가 없는 콜렉션이다. 중복되는 원소를 셋에 집어넣을수 없으며 내부적으로 해쉬테이블처럼 구현됐다. 이러한 이유는 최적화 때문인데, 멤버 추가, 삭제, 서치 등의 시간이 \(O(1)\)에 실행되기 때문이다.&lt;/p&gt;

&lt;p&gt;셋의 메모리 footprint?는 모든 멤버가 정수일 경우 줄일 수 있다. 멤버 최종 수는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set-max-inset-entries&lt;/code&gt;에 의존하며 이는 챕터 4에서 추후 설명하겠다.&lt;/p&gt;

&lt;p&gt;원소 개수는 \(2^{32} -1\)이며 40억개 저장 가능하다.&lt;/p&gt;

&lt;p&gt;아래는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sets&lt;/code&gt;의 사용 사례다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 필터링: 예를들어 특정 도시에서 출발하여 다른 도시에 도착하는 지정된 항공편을 필터링 할 수 있다.&lt;/li&gt;
  &lt;li&gt;데이터 그루핑: 비슷한 제품을 본 모든 사용자를 그룹핑(아마존의 추천 시스템)&lt;/li&gt;
  &lt;li&gt;멤버쉽 체킹: 블랙리스트에 존재하는지를 확인.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sadd&quot;&gt;SADD&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SADD&lt;/code&gt;는 하나 혹은 그 이상의 멤버를 추가하기 위한 커맨드다. 만약 추가하려는 멤버가 존재할 경우 이를 기각하고, 추가된 멤버 수를 리턴한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ redis-cli
127.0.0.1:6379&amp;gt; SADD user:max:favorite_artists &quot;Arcade Fire&quot; &quot;Arctic Monkeys&quot;
&quot;Belle &amp;amp; Sebastian&quot; &quot;Lenine&quot;
(integer) 4
127.0.0.1:6379&amp;gt; SADD user:hugo:favorite_artists &quot;Daft Punk&quot; &quot;The Kooks&quot; &quot;Arctic
Monkeys&quot;
(integer) 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sinter&quot;&gt;SINTER&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SINTER&lt;/code&gt; 커맨드는 하나 혹은 그 이상의 셋을 받고, 모든 셋에 공통적으로 존재하는 멤버를 배열로 리턴한다.&lt;/p&gt;

&lt;p&gt;아래 예제는 Hugo와 Max가 공통적으로 좋아하는 아티스트를 보여준다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; SINTER user:max:favorite_artists user:hugo:favorite_artists
1) &quot;Arctic Monkeys&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sdiff&quot;&gt;SDIFF&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SDIFF&lt;/code&gt; 커맨드는 하나 혹은 그 이상의 셋을 받는다. 뒤에 따라오는 셋에 존재하지 않는 모든 멤버를 리턴한다. 이 커맨드는 키 네임의 순서가 중요하다. 존재하지 않는 모든 키는 빈 집합으로 간주된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; SDIFF user:max:favorite_artists user:hugo:favorite_artists
1) &quot;Belle &amp;amp; Sebastian&quot;
2) &quot;Arcade Fire&quot;
3) &quot;Lenine&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;두 번째 예제는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user:max:favorite_artists&lt;/code&gt;의 존재하지 않는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user:hugo:favorite_artists&lt;/code&gt;의 멤버를 모두 리턴한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; SDIFF user:hugo:favorite_artists user:max:favorite_artists
1) &quot;Daft Punk&quot;
2) &quot;The Kooks&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sunion&quot;&gt;SUNION&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUNION&lt;/code&gt; 커맨드는 하나 혹은 그 이상의 셋을 받는다. 모든 셋의 모든 멤버를 리턴한다. 중복되는 멤버는 한 번만 보여준다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; SUNION user:max:favorite_artists user:hugo:favorite_artists
1) &quot;Lenine&quot;
2) &quot;Daft Punk&quot;
3) &quot;Belle &amp;amp; Sebastian&quot;
4) &quot;Arctic Monkeys&quot;
5) &quot;Arcade Fire&quot;
6) &quot;The Kooks&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;spandmember&quot;&gt;SPANDMEMBER&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SPNADMEMBER&lt;/code&gt;는 주어진 셋에 랜덤한 멤버를 리턴한다. 셋은 순서가 없기 때문에 위치 인덱스 값으로 반환할 수 없다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; SRANDMEMBER user:max:favorite_artists
&quot;Arcade Fire&quot;
127.0.0.1:6379&amp;gt; SRANDMEMBER user:max:favorite_artists
&quot;Lenine&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sismember-srem-scard-smembers&quot;&gt;SISMEMBER, SREM, SCARD, SMEMBERS&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SISMEMBER&lt;/code&gt;는 멤버가 셋 안에 존재하는지 확인한다. 존재할 경우에는 1, 아닐 경우에는 0을 리턴한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SISMEMBERS&lt;/code&gt;는 셋에 존재하는 모든 멤버를 리턴한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SREM&lt;/code&gt;은 멤버를 셋에서 삭제하고 인티저 값을 리턴한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCARD&lt;/code&gt;는 멤버의 수를 리턴한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; SISMEMBER user:max:favorite_artists &quot;Arctic Monkeys&quot;
(integer) 1
127.0.0.1:6379&amp;gt; SREM user:max:favorite_artists &quot;Arctic Monkeys&quot;
(integer) 1
127.0.0.1:6379&amp;gt; SISMEMBER user:max:favorite_artists &quot;Arctic Monkeys&quot;
(integer) 0
127.0.0.1:6379&amp;gt; SCARD user:max:favorite_artists
(integer) 3
127.0.0.1:6379&amp;gt; SMEMBERS user:max:favorite_artists
1) &quot;Belle &amp;amp; Sebastian&quot;
2) &quot;Arcade Fire&quot;
3) &quot;Lenine&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sorted-sets&quot;&gt;Sorted Sets&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sorted Set&lt;/code&gt; 은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&lt;/code&gt;과 매우 흡사하다. 하지만 각 멤버들이 연관된 스코어를 가지고 있다. 다른 말로 하자면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sorted Set&lt;/code&gt;은 중복된 멤버를 가지지 않고, 스코어에의해서 정렬된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Strings&lt;/code&gt;다. 스코어는 중복될 수 있다. 이러한 경우에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lexicographically&lt;/code&gt;하게 정렬한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sorted Set&lt;/code&gt; 작업은 매우 빠르지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&lt;/code&gt;의 작업보단 빠르지 않다. 추가, 삭제 갱신은 \(O(logN)\)이 걸린다. 내부적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sorted Set&lt;/code&gt;은 두 개의 자료구조로 나뉘어져 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;skip list with hash table&lt;/code&gt; 스킵 리스트는 정렬된 원소 시퀀스를 빠르게 탐색하기 위한 자료구조다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zset-max-ziplist-entries&lt;/code&gt; 과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zset-max-ziplist-value&lt;/code&gt;에 기반한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ziplist&lt;/code&gt; 이는 챕터 4에서 다루도록 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sorted Set&lt;/code&gt;의 사용사례다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;웨이팅 리스트&lt;/li&gt;
  &lt;li&gt;온라인 게임과 같은 곳에 리더보드&lt;/li&gt;
  &lt;li&gt;자동완성 시스템&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;zadd&quot;&gt;ZADD&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZADD&lt;/code&gt;는 하나 혹은 그 이상 멤버를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sorted Set&lt;/code&gt;에 추가한다. 이미 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sorted Set&lt;/code&gt;에 존재하는 멤버일 경우에는 요청을 무시한다. 추가된 멤버를 정수 값으로 반환한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ redis-cli
127.0.0.1:6379&amp;gt; ZADD leaders 100 &quot;Alice&quot;
(integer) 1
127.0.0.1:6379&amp;gt; ZADD leaders 100 &quot;Zed&quot;
(integer) 1
127.0.0.1:6379&amp;gt; ZADD leaders 102 &quot;Hugo&quot;
(integer) 1
127.0.0.1:6379&amp;gt; ZADD leaders 101 &quot;Max&quot;
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sorted Set&lt;/code&gt;에 멤버는 스코어와 문자열로 추가된다. 앞에서도 설명했듯이 두가지 정렬 기준이 존재하는데, 스코어 순으로 정렬하며, 만약 스코어가 같을 경우에는 멤버의 문자열 값을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lexicographically&lt;/code&gt;하게 정렬한다. 앞 예제에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alice&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Zed&lt;/code&gt;가 같은 스코어를 가지기 때문에, 알파벳 순으로 정렬된다.&lt;/p&gt;

&lt;h3 id=&quot;zrange-zrevrange--withscores&quot;&gt;ZRANGE, ZREVRANGE ~ WITHSCORES&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZRANGE&lt;/code&gt;는 주어진 범위에 해당되는 멤버를 출력하며, 오름차순으로 출력한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZREVRANGE&lt;/code&gt;는 주어진 범위에 해당되는 멤버를 출력하며, 내림차순으로 출력한다.&lt;/p&gt;

&lt;p&gt;위 두 커맨드에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WITHSCORES&lt;/code&gt;를 옵션 파라미터로 줄 수 있으며, 스코어를 같이 출력하게 된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; ZREVRANGE leaders 0 -1 WITHSCORES
1) &quot;Hugo&quot;
2) &quot;102&quot;
3) &quot;Max&quot;
4) &quot;101&quot;
5) &quot;Zed&quot;
6) &quot;100&quot;
7) &quot;Alice&quot;
8) &quot;100&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; ZREVRANGE leaders 0 -1
1) &quot;Hugo&quot;
2) &quot;Max&quot;
3) &quot;Zed&quot;
4) &quot;Alice&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;zrem&quot;&gt;ZREM&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZREM&lt;/code&gt;은 멤버를 지운다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; ZREM leaders &quot;Hugo&quot;
(integer) 1
127.0.0.1:6379&amp;gt; ZREVRANGE leaders 0 -1
1) &quot;Max&quot;
2) &quot;Zed&quot;
3) &quot;Alice&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;zscore-zrank-zrevrank&quot;&gt;ZSCORE, ZRANK, ZREVRANK&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZSCORE&lt;/code&gt;는 특정 멤버에 스코어를 반환한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZRANK&lt;/code&gt;는 특정 멤버에 랭크(인덱스)를 반환한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZREVRANK&lt;/code&gt; 는 특정 멤버에 랭크를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;high to low&lt;/code&gt; 방향에서 인덱스를 반환한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; ZSCORE leaders &quot;Max&quot;
&quot;101&quot;
127.0.0.1:6379&amp;gt; ZRANK leaders &quot;Max&quot;
(integer) 2
127.0.0.1:6379&amp;gt; ZREVRANK leaders &quot;Max&quot;
(integer) 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;bitmap&quot;&gt;Bitmap&lt;/h2&gt;
&lt;p&gt;비트맵이 실제 데이터 타입은 아니고, 스트링이다. 스트링에 비트 오퍼레이션을 진행하기 위해 만들어진 데이터 타입이라 볼 수 있다. 레디스에선 이를 조작할 수 있는 커맨드들을 제공하기에 데이터 타입으로 취급한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bitmap&lt;/code&gt;은 0과 1을 저장할 수 있는 비트 시퀀스이다. 레디스 공식 문서에서 비트맵에 인덱스는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;offset&lt;/code&gt;으로 불린다.&lt;/p&gt;

&lt;p&gt;비트맵이 메모리를 어떻게 효율적으로 사용하는지 알기위해선 Set과 비교해볼 필요가있다.&lt;/p&gt;

&lt;h3 id=&quot;comparison-scenario&quot;&gt;Comparison Scenario&lt;/h3&gt;

&lt;p&gt;만약 5백만명의 사용자가 존재하고, 하루에 2백만명 정도의 사용자가 웹사이트에 접속한다고 가정하자. 이때 사용자 아이디는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4byte&lt;/code&gt; 정수값으로 표현된다.&lt;/p&gt;

&lt;p&gt;웹사이트에 당일 접속한 모든 유저의 아이디를 저장하는 기능을 구현한다하면, (비트맵에선 오프셋이 유저의 아이디를 매핑할 것이다) 이러한 상황에서 두 자료구조는 아래와 같은 구현 스펙이 결정된다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Redis Key&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Amount of bits per user&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Stored users&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Total memory&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;visits:2015-01-01&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Bitmap&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1 bit&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;5 million&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1 * 5000000 bits = 625kB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;visits:2015-01-01&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Set&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;32 bit&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2 million&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;32 * 2000000 bits = 8MB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;최악의 상황에서도 비트맵은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&lt;/code&gt;보다 괜찮은 메모리 효율을 보여주고 있다. 하지만 그렇다고해서 항상 비트맵이 효율적이라고 단정지을 순 없다. 아래 테이블을 보자.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Redis Key&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Amount of bits per user&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Stored users&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Total memory&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;visits:2015-01-01&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Bitmap&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1 bit&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;5 million&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1 * 5000000 bits = 625kB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;visits:2015-01-01&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Set&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;32 bit&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;100&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;32 * 100 bits = 3.125KB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;비트맵은 실시간 분석에 사용하기 적합한 자료구조이다. 예를들어, 사용자 X가 Y를 얼마나 행했는가에 대한 질문 혹은 얼마나 많은 유저가 Y라는 이벤트를 행했는지 확인할 수있다. 아래는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bitmap&lt;/code&gt;에 대한 사용 예시다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;얼마나 많은 사람이 오늘 이 블로그 포스트를 봤는가?&lt;/li&gt;
  &lt;li&gt;특정 유저 1이 오늘 이 블로그를 읽었는가?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;setbit&quot;&gt;SETBIT&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SETBIT&lt;/code&gt;는 특정 비트맵에 있는 오프셋을 설정한다. 1과 0만을 값으로 받으며, 만약 존재하지 않을 경우 생성한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; SETBIT visits:2015-01-01 10 1
(integer) 0
127.0.0.1:6379&amp;gt; SETBIT visits:2015-01-01 15 1
(integer) 0
127.0.0.1:6379&amp;gt; SETBIT visits:2015-01-02 10 1
(integer) 0
127.0.0.1:6379&amp;gt; SETBIT visits:2015-01-02 11 1
(integer) 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;getbit&quot;&gt;GETBIT&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GETBIT&lt;/code&gt;는 특정 비트맵에 있는 오프셋을 가져온다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; GETBIT visits:2015-01-01 10
(integer) 1
127.0.0.1:6379&amp;gt; GETBIT visits:2015-01-02 15
(integer) 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bitcount&quot;&gt;BITCOUNT&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BITCOUNT&lt;/code&gt;는 특정 비트맵에 1로 설정된 오프셋의 개수를 반환한다. 현재 예제에서는 당일 날 접속한 사용자가 몇명인지 반환한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; BITCOUNT visits:2015-01-01
(integer) 2
127.0.0.1:6379&amp;gt; BITCOUNT visits:2015-01-02
(integer) 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bittop&quot;&gt;BITTOP&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BITOP&lt;/code&gt;는 비트 연산을 수행하며 이에 대한 결과값을 저장할 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destination key&lt;/code&gt;가 필요하다. 비트 오퍼레이션에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OR&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AND&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XOR&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AND&lt;/code&gt; 등이 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; BITOP OR total_users visits:2015-01-01 visits:2015-01-02
(integer) 2
127.0.0.1:6379&amp;gt; BITCOUNT total_users
(integer) 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;hyperloglogs&quot;&gt;HYperloglogs&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hyperloglog&lt;/code&gt; 또한 실제 데이터타입은 아니다. 개념적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hyperloglog&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&lt;/code&gt;에 존재하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unique element&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cardinality&lt;/code&gt; 근사값을 제공하는 데에 효과적인 알고리즘이다.&lt;/p&gt;

&lt;p&gt;\(O(1)\), 상수시간안에 이를 해결하며, 메모리 사용량도 매우 적기 때문에 효과적이다. 실제 데이터타입은 아니지만, 레디스에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hyperloglog&lt;/code&gt;를 사용하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&lt;/code&gt;에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cardinality&lt;/code&gt;를 계산 하기위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;을 조작하는 커맨드를 제공한다.&lt;/p&gt;

&lt;p&gt;하지만, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hyperloglog&lt;/code&gt; 사용할 때 알아둬야 할 것은 이 알고리즘은 확률적 알고리즘으로써 정확도가 100퍼센트는 아닌, 근사값을 예측하는 알고리즘이라는 것이다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Redis&lt;/code&gt;에서는 기본적으로 0.81퍼센트의 오차가 있다고 말한다.&lt;/p&gt;

&lt;p&gt;알고리즘에 대한 설명은 &lt;a href=&quot;http://algo.inria.fr/flajolet/Publications/FlFuGaMe07.pdf&quot;&gt;HyperLogLog: the analysis of a near-optimal cardinality estimation algorithm&lt;/a&gt; 에서 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;아래는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HyperLogLog&lt;/code&gt;에 사용 예시다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;웹사이트를 방문한 특정 유저의 수.&lt;/li&gt;
  &lt;li&gt;특정 시간 혹은 날짜에 나의 사이트에서 검색된 용어 개수&lt;/li&gt;
  &lt;li&gt;해쉬태크 개수&lt;/li&gt;
  &lt;li&gt;이 포스트에서 사용된 구별가능한 단어 개수&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;countiong-unique-users---hyperloglog-vs-set&quot;&gt;Countiong unique users - Hyperloglog vs Set&lt;/h3&gt;

&lt;p&gt;시간당 평균 10만명에 사용자가 접속한다고 하자. 각각의 사용자는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UUID(universally unique identifier)&lt;/code&gt;와 같은 32바이트 스트링(ex:  de305d54-75b4-431b-adb2-eb6b9e546014)으로 특정된다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Memory in an hour&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Memory in a day&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Memory in a month&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HyperLogLog&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;12 kb&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;12 kB * 24 = 288 kB&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;288 kB * 30 = 8.4 MB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Set&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;32 bytes * 100000 = 3.2 MB&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3.2 MB * 24 = 76.8 MB&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;76.8 MB * 30 = 2.25 GB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HyperLogLog&lt;/code&gt;는 시간당 특정 사용자가 접속한지 확인하기 위해 저장매체의 용량이 12kb 밖에 안된다.&lt;/p&gt;

&lt;h3 id=&quot;pfadd&quot;&gt;PFADD&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PFADD&lt;/code&gt;는 하나 혹은 그 이상의 스트링을 입력받으며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardinality&lt;/code&gt;가 변경되었을 경우 1 아닐경우 0을 반환한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ redis-cli
127.0.0.1:6379&amp;gt; PFADD visits:2015-01-01 &quot;carl&quot; &quot;max&quot; &quot;hugo&quot; &quot;arthur&quot;
(integer) 1
127.0.0.1:6379&amp;gt; PFADD visits:2015-01-01 &quot;max&quot; &quot;hugo&quot;
(integer) 0
127.0.0.1:6379&amp;gt; PFADD visits:2015-01-02 &quot;max&quot; &quot;kc&quot; &quot;hugo&quot; &quot;renata&quot;
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pfcount&quot;&gt;PFCOUNT&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PFCOUNT&lt;/code&gt;는 하나 혹은 그 이상의 키를 받으며, 인자가 하나일 경우에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;approximate cardinality&lt;/code&gt;를 반환한다. 키가 여러 개일 경우 총 합을 반환한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; PFCOUNT visits:2015-01-01
(integer) 4
127.0.0.1:6379&amp;gt; PFCOUNT visits:2015-01-02
(integer) 4
127.0.0.1:6379&amp;gt; PFCOUNT visits:2015-01-01 visits:2015-01-02
(integer) 6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pfmerge&quot;&gt;PFMERGE&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PFMERGE&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destination key&lt;/code&gt;를 필요로 하며, 하나 혹은 그 이상의 키를 인자로 받아야 한다. 특정 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hyperloglog&lt;/code&gt;를 모두 저장한 값을 리턴한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; PFMERGE visits:total visits:2015-01-01 visits:2015-01-02
OK
127.0.0.1:6379&amp;gt; PFCOUNT visits:total
(integer) 6

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;font size=&quot;6&quot;&gt;Refernce&lt;/font&gt;
  &lt;ul&gt;
    &lt;li&gt;Maxwell Dayvson Da Silva, Redis Essentials&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>조원빈</name></author><category term="redis" /><category term="NoSQL" /><category term="database" /><category term="redis" /><category term="nodejs" /><summary type="html"></summary></entry></feed>