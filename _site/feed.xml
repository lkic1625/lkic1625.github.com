<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-10-20T04:20:37+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">untitled</title><subtitle>기록용 블로그입니다. 개발관련 게시글을 주로 올립니다.</subtitle><author><name>조원빈</name></author><entry><title type="html">Nouvelle Vague</title><link href="http://localhost:4000/ml/deep_learning_with_keras_recommender_systems/" rel="alternate" type="text/html" title="Nouvelle Vague" /><published>2020-10-19T00:00:00+09:00</published><updated>2020-10-20T04:00:00+09:00</updated><id>http://localhost:4000/ml/deep_learning_with_keras_recommender_systems</id><content type="html" xml:base="http://localhost:4000/ml/deep_learning_with_keras_recommender_systems/">&lt;h1 id=&quot;개요&quot;&gt;개요&lt;/h1&gt;
&lt;p&gt;추천시스템 개발을 위해 예제를 참고하여 정리하였다.
파이썬 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keras&lt;/code&gt;로 개발 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flaks&lt;/code&gt;를 이용해 간단한 API 설계로 서버와 통신하려한다.
아직 미흡한 점이 많은 시슽&lt;/p&gt;

&lt;h1 id=&quot;코드&quot;&gt;코드&lt;/h1&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;zipfile&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZipFile&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow.keras&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pathlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;DNN.RecommenderNet&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RecommenderNet&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# get file for server or
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ratings_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ratings.csv&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ratings_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;user_ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user2user_encoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;userencoded2user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;book_ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bookId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;book2book_encoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;book_encoded2book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user2user_encoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;book&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;movieId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book2book_encoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;num_users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user2user_encoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;num_books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book_encoded2book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rating&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rating&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;astype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# min and max ratings will be used to normalize the ratings later
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_rating&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rating&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;max_rating&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rating&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Number of users: {}, Number of Movies: {}, Min rating: {}, Max rating: {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;num_users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_rating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_rating&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;book&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Normalize the targets between 0 and 1. Makes it easy to train.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rating&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_rating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_rating&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_rating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Assuming training on 90% of the data and validating on 10%.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_indices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;EMBEDDING_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'recommender_model.h5'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RecommenderNet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EMBEDDING_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;losses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BinaryCrossentropy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optimizers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;history&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;epochs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;verbose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;validation_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'recommender_model.h5'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>조원빈</name></author><category term="ML" /><category term="ML" /><category term="Collaborative Filtering" /><category term="projects" /><summary type="html">개요 추천시스템 개발을 위해 예제를 참고하여 정리하였다. 파이썬 keras로 개발 후 Flaks를 이용해 간단한 API 설계로 서버와 통신하려한다. 아직 미흡한 점이 많은 시슽</summary></entry><entry><title type="html">shortest path</title><link href="http://localhost:4000/algorithm/dijkstra_algorithm/" rel="alternate" type="text/html" title="shortest path" /><published>2020-10-17T00:00:00+09:00</published><updated>2020-10-17T05:00:00+09:00</updated><id>http://localhost:4000/algorithm/dijkstra_algorithm</id><content type="html" xml:base="http://localhost:4000/algorithm/dijkstra_algorithm/">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;definition&quot;&gt;definition&lt;/h1&gt;

&lt;p&gt;\(input\): \(G=(V,E,g), v_0 \in V\)&lt;br /&gt;
\(output\): shortest path \(v_0\) to \(v_i\) \((v_i \in V)\)&lt;/p&gt;

&lt;h1 id=&quot;다익스트라-알고리즘&quot;&gt;다익스트라 알고리즘&lt;/h1&gt;
&lt;p&gt;다익스트라 알고리즘은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Invariant&lt;/code&gt;를 중심으로 진행된다. 이는 아래와 같다&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;: \(\forall{u} \in T, d_{min}(u) = \text{shortest path}\)&lt;/li&gt;
  &lt;li&gt;
\[\forall{u} \notin T, \text{shortest path} v_0 \to T_0 \to u is \text{shortest path then insert u to T} (T_0 \in T)\]
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;정확성-증명&quot;&gt;정확성 증명&lt;/h2&gt;

&lt;p&gt;Proof of Dijkstra’s algorithm is constructed by induction on the number of visited nodes.&lt;/p&gt;

&lt;p&gt;Invariant hypothesis: For each node v, dist[v] is the shortest distance from source to v when traveling via visited nodes only, or infinity if no such path exists. (Note: we do not assume dist[v] is the actual shortest distance for unvisited nodes.)&lt;/p&gt;

&lt;p&gt;The base case is when there is just one visited node, namely the initial node source, in which case the hypothesis is trivial.&lt;/p&gt;

&lt;p&gt;Otherwise, assume the hypothesis for n-1 visited nodes. In which case, we choose an edge vu where u has the least dist[u] of any unvisited nodes and the edge vu is such that dist[u] = dist[v] + length[v,u]. dist[u] is considered to be the shortest distance from source to u because if there were a shorter path, and if w was the first unvisited node on that path then by the original hypothesis dist[w] &amp;gt; dist[u] which creates a contradiction. Similarly if there were a shorter path to u without using unvisited nodes, and if the last but one node on that path were w, then we would have had dist[u] = dist[w] + length[w,u], also a contradiction.&lt;/p&gt;

&lt;p&gt;After processing u it will still be true that for each unvisited node w, dist[w] will be the shortest distance from source to w using visited nodes only, because if there were a shorter path that doesn’t go by u we would have found it previously, and if there were a shorter path using u we would have updated it when processing u.&lt;/p&gt;

&lt;p&gt;After all nodes are visited, the shortest path from source to any node v consists only of visited nodes, therefore dist[v] is the shortest distance.&lt;/p&gt;

&lt;h2 id=&quot;pseudo-code&quot;&gt;pseudo code&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function Dijkstra(Graph, source):
      dist[source] ← 0                           // Initialization

      create vertex priority queue Q

      for each vertex v in Graph:          
          if v ≠ source
              dist[v] ← INFINITY                 // Unknown distance from source to v
              prev[v] ← UNDEFINED                // Predecessor of v

         Q.add_with_priority(v, dist[v])


     while Q is not empty:                      // The main loop
         u ← Q.extract_min()                    // Remove and return best vertex
         for each neighbor v of u:              // only v that are still in Q
             alt ← dist[u] + length(u, v)
             if alt &amp;lt; dist[v]
                 dist[v] ← alt
                 prev[v] ← u
                 Q.decrease_priority(v, alt)

     return dist, prev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;생각해볼-문제&quot;&gt;생각해볼 문제.&lt;/h2&gt;

&lt;p&gt;주어진 그래프 \(G\)의 한 노드인 \(v_0\)에서 어떤 노드 \(v_i\)로 가는 \(\text{Shortest Path}\)를 구하였다고 가정하자.
이 \(Path\)의 일부분인 \(p\)가 \(v_j\)에서 시작하여 \(v_k\)에서 끝난다면, \(p\)는 \(v_j\)와 \(v_k\)를 잇는 \(\text{Shortest Path}\)임을 증명하라.
또한 \(p\)의 시작과 끝이 아닌 중간 노드들 중에는 \(v_0\)나 \(v_k\)가 없음을 증명하라.&lt;/p&gt;

&lt;h3 id=&quot;정답&quot;&gt;정답?&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;경로 \(v_j \to v_k\)가  \(\text{Shortest Path}\)라고 가정하자 그럼 두 정점을 잇는 더 짧은 경로 \(\hat {p}\)가 존재할 것이다.
\(\hat {p}\)가 존재할 경우 미리구한 경로 \(v_0 \to v_i\) 또한 중간 경로 \(p\)를 \(\hat {p}\)로 바꾼다면 더 짧은 경로가 존재하게 포함되므로
\(\text{Shortest Path}\)아니게 된다 이는 기정에 모순이므로 경로 \(\hat {p}\)는 존재하지 않는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;\(v_k\)가 중간에 존재한다면 경로 \(p\)는 경로 \(p\)를 포함하는 경로가 된다. 이는 불가능. 시작 노드또 \(v_0\)한 이와 같은 방법으로 증명 가능하다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;font size=&quot;6&quot;&gt;Refernce&lt;/font&gt;
  &lt;ul&gt;
    &lt;li&gt;https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm#Proof_of_correctness&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>조원빈</name></author><category term="algorithm" /><category term="greedy" /><category term="algorithm" /><summary type="html"></summary></entry><entry><title type="html">OAuth 2.0(작성 중)</title><link href="http://localhost:4000/backend/OAuth_2.0/" rel="alternate" type="text/html" title="OAuth 2.0(작성 중)" /><published>2020-10-17T00:00:00+09:00</published><updated>2020-10-20T04:00:00+09:00</updated><id>http://localhost:4000/backend/OAuth_2.0</id><content type="html" xml:base="http://localhost:4000/backend/OAuth_2.0/">&lt;h1 id=&quot;개요&quot;&gt;개요&lt;/h1&gt;

&lt;p&gt;Token based Authentication 관련 구현에 관심이 있어 공식문서와 여러 인터넷 예제를 참고하여 정리한 글입니다.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;h2 id=&quot;roles&quot;&gt;Roles&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/oauth-role.PNG&quot; alt=&quot;이미지1&quot; /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OAuth&lt;/code&gt;에는 3가지 역할이 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Client&lt;/code&gt;는 우리가 현재 제공하고 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Third party service&lt;/code&gt;이다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resource Owner&lt;/code&gt;는 우리의 서비스를 제공받는 사용자이다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resource Server&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Client&lt;/code&gt;에게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resource&lt;/code&gt;를 제공해줄 대상이며 구글, 페이스북 등이 될 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authorization Server&lt;/code&gt;는  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RO&lt;/code&gt;가 인증 시도와 클라이언트에게 토큰을 발급해주는 서버이다. 보통 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RO&lt;/code&gt;와 같이 사용되기 때문에 이번 포스트에서는 구분을 두지 않으려 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;protocol-flow&quot;&gt;Protocol Flow&lt;/h2&gt;

&lt;p&gt;대략적인 프로토콜 개요는 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/OAuth-protocol-flow.PNG&quot; alt=&quot;이미지4&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(A) 클라이언트는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RO&lt;/code&gt;에게 인증을 요청한다 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AO&lt;/code&gt;를 통해서 요청할 수도 있고 직접 요청할 수도 있다.&lt;/li&gt;
  &lt;li&gt;(B) 클라이언트는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorization grant&lt;/code&gt;를 전달 받는다. 이는 클라이언트가 인증되었음을 나타낸다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorization grant&lt;/code&gt;의 타입은 클라이언트의 요청과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AO&lt;/code&gt;가 지원하는 타입에 의존한다.&lt;/li&gt;
  &lt;li&gt;(C) 클라이언트는 인증과 함께 엑세스 토큰을 요청하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorization grant&lt;/code&gt;되었음을 알린다.&lt;/li&gt;
  &lt;li&gt;(D) 서버는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorization grant&lt;/code&gt;을 확인하고 클라이언트를 인증한다. 인증이 완료되면 엑세스 토큰을 발급한다.&lt;/li&gt;
  &lt;li&gt;(E) 클라이언트는 엑세스 토큰을 통해 민감정보를 요청할 수 있다.&lt;/li&gt;
  &lt;li&gt;(F) 서버는 토큰의 유효성 검사를 진행 후 응답을 보낸다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;access-token&quot;&gt;Access Token&lt;/h2&gt;

&lt;p&gt;액세스 토큰은 사용자 민감 정보의 접근할 수 있는 일종의 자격이다. 클라이언트가 발급하며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorization&lt;/code&gt; 즉, 인증되었음을 나타내는 문자열이다.
대개는 클라이언트는 이 토큰을 인식할 수 없도록 한다. 토큰은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RO&lt;/code&gt;가 제공한 특정 스코프를 가지고 생성되며, 만료시간을 가진다. 만료시간은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RS&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AS&lt;/code&gt;에 의해 강제된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JWT&lt;/code&gt;를 이전에 사용해 보았기에 특정 문자를 인식할 수 있음은 쉽게 이해할 수 있다.&lt;/p&gt;

&lt;p&gt;엑세스 토큰은 다양한 응용방식이 있는데 &lt;a href=&quot;https://tools.ietf.org/html/rfc6750&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rfc6750&lt;/code&gt;&lt;/a&gt;에서 직접 살펴볼 수 있다. 이는 추후 포스팅에서 다시 다루도록 하겠다.&lt;/p&gt;

&lt;h2 id=&quot;refresh-token&quot;&gt;Refresh token&lt;/h2&gt;
&lt;p&gt;리프레쉬 토큰은 엑세스 토큰을 얻기 위한 일족의 자격이라고 볼 수 있다.
이는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AO&lt;/code&gt;에 의해 클라이언트가 발급하며 엑세스 토큰이 파기되거나 유효하지 않을 경우 새로운 엑세스 토큰을 얻기 위해 사용된다.
리프레쉬 토큰은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AO&lt;/code&gt;에서 엑세스 토큰을 발급할 때 함께 동봉되며 이는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AO&lt;/code&gt;의 재량에 따른 선택적 사항이다.&lt;/p&gt;

&lt;p&gt;엑세스토큰과 달리 리프레쉬 토큰은 리소스 서버에 전송되지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/token-based-communication.PNG&quot; alt=&quot;이미지3&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(A) 클라이언트는 권한 부여 서버에 인증하고 권한 부여를 제시하여 엑세스 토큰을 요청한다&lt;/li&gt;
  &lt;li&gt;(B) 인증 서버가 권한 부여와 클라이언트의 유효성을 검사한다. 유효할 경우 리프레쉬 토큰과 엑세스 토큰을 보낸다.&lt;/li&gt;
  &lt;li&gt;(C) 클라이언트가 엑세스 토큰을 이용하여 서버에게 데이터를 요청한다.&lt;/li&gt;
  &lt;li&gt;(D) 토큰이 유효할 경우 데이터를 보낸다.&lt;/li&gt;
  &lt;li&gt;(E) 엑세스 토큰이 파기되기 전까지 (C)와 (D)를 반복한다. 만약 토큰이 파기된 것을 안다면 앞에 과정을 생략하고 (G)로간다.&lt;/li&gt;
  &lt;li&gt;(F) 토큰이 유효하지 않을 경우 서버는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invalid token error&lt;/code&gt;를 보낸다.&lt;/li&gt;
  &lt;li&gt;(G) 클라이언트가 새로운 액세스 토큰을 발급 받기 위해 서버에 인증 후 리프레쉬 토큰을 제시한다.&lt;/li&gt;
  &lt;li&gt;(H) 인증 서버가 클라이언트를 인증하고 리프레쉬 토큰의 유효성을 검사한다. 만약 유효할 경우 새로운 엑세스 토큰을 발급한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;protocol-endpoints&quot;&gt;Protocol Endpoints&lt;/h2&gt;

&lt;p&gt;인증 프로세스는 두 개의 인증 서버 엔드포인트로 운용된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authorization endpoint&lt;/code&gt;: 클라이언트가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user-agent&lt;/code&gt; 리다이렉션을 통해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RO&lt;/code&gt;로부터 권한을 얻기 위해 사용한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Token Endpoint&lt;/code&gt;: 클라이언트가 엑세스 토큰에 대한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorization grant&lt;/code&gt; 교환을 위해 사용하며, 일반적으로 클라이언트 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authentication&lt;/code&gt; 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;클라이언트 또한 한 개의 엔드포인트를 갖는다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Redirection endpoint&lt;/code&gt; - 인증 서버가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resource owner user-agent&lt;/code&gt;를 통해 클라이언트에게 인증자격(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorization credentials&lt;/code&gt;)을 포함한 응답을 보내기 위해 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;authorization-code-grant&quot;&gt;Authorization Code Grant&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RO&lt;/code&gt;가 승인했다 해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;access token&lt;/code&gt;을 바로 발급하지 않고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RS&lt;/code&gt;와 상호협의를 위해 거쳐야하는 단계이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/autho-grant.PNG&quot; alt=&quot;이미지2&quot; /&gt;;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(A): 이는 클라이언트가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RO&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user-agent&lt;/code&gt;를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authorization endpoint&lt;/code&gt;가리키며 시작한다. 클라이언트는 식별자, 요청 범위 로컬상태 및 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AO&lt;/code&gt;가 권한을 부여(또는 거부)한 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user-agent&lt;/code&gt;를 다시 보낼 리디렉션 URI를 포함한다.&lt;/li&gt;
  &lt;li&gt;(B): &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AS&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RO&lt;/code&gt;를 인증하며(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user-agent&lt;/code&gt;를 통해서) 클라이언트의 엑세스 요청에 대한 권한 부여 혹은 거부를 결정한다.&lt;/li&gt;
  &lt;li&gt;(C): &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RO&lt;/code&gt;의 권한 부여가 허용되면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AO&lt;/code&gt;는 이전에 받았던(클라이언트 등록 혹은 권한 요청에서) 리디렉션 URI를 통해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user-agent&lt;/code&gt;를 리다이렉트 한다. 리디렉션 URI에는 이전에 클라이언트가 제공한 인증 코드(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Autorization Code&lt;/code&gt;)와 모든 로컬 상태가 포함되어 있다.&lt;/li&gt;
  &lt;li&gt;(D): 클라이언트는 이전 단계에서 받았던 인증 코드를 포함하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AO&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Token Endpoint&lt;/code&gt;에 엑세스 토큰을 요청한다. 요청이 진행될 때 클라이언트는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AO&lt;/code&gt;로부터 인증한다. 클라이언트는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verification&lt;/code&gt;을 위한 인증코드를 얻기 위해 리디렉션 URI를 포함한다.&lt;/li&gt;
  &lt;li&gt;(E): &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AO&lt;/code&gt;가 클라이언트를 인증하고 인증코드를 검증한다. 그리고 받은 URI가 단계(C)에서 클라이언트를 리다이렉트하는 데 사용된 URI와 일치하는지 확인한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;font size=&quot;6&quot;&gt;Refernce&lt;/font&gt;
  &lt;ul&gt;
    &lt;li&gt;https://opentutorials.org/course/3405&lt;/li&gt;
    &lt;li&gt;https://tools.ietf.org/html/rfc6749#section-4.1&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>조원빈</name></author><category term="backend" /><category term="backend" /><category term="HTTP" /><category term="protocol" /><summary type="html">개요</summary></entry><entry><title type="html">topological sort</title><link href="http://localhost:4000/algorithm/topological_sort/" rel="alternate" type="text/html" title="topological sort" /><published>2020-10-17T00:00:00+09:00</published><updated>2020-10-17T05:00:00+09:00</updated><id>http://localhost:4000/algorithm/topological_sort</id><content type="html" xml:base="http://localhost:4000/algorithm/topological_sort/">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;definition&quot;&gt;Definition&lt;/h1&gt;
&lt;p&gt;\(input\): \(DAG(\text{Directed Acyclic Graph})\)&lt;br /&gt;
\(output\): Node sequence \((v_1, v_2, ... , v_n)\) such that no edge \(v_j \to v_i\) (j &amp;gt; i)&lt;/p&gt;

&lt;h1 id=&quot;invariant&quot;&gt;Invariant&lt;/h1&gt;
&lt;p&gt;\(DAG\)에서 \(indegree\)가 0인 노드는 반드시 존재한다.&lt;/p&gt;

&lt;p&gt;\(Proof\):
\(indegree\)가 0인 노드가 하나도 없는 \(DAG\)를 가정하자. 모든 노드는 그러면 \(indegree\)가 1보다 크거나 같다.&lt;/p&gt;

&lt;p&gt;어떤 노드 하나를 골라 \(indegree\)가 가리키는 부모 노드를 탐색할 때,
모든 노드들은 \(indegree\)가 0이상이기 때문에 반드시 부모 노드를 가지게 된다.&lt;/p&gt;

&lt;p&gt;노드의 개수는 무한하지 않기 때문에 이 탐색은 순환하며 가정이 모순임을 나타낸다.&lt;/p&gt;

&lt;p&gt;\(\Box\) \(DAG\)에서 \(indegree\)가 0인 노드는 반드시 존재한다.&lt;/p&gt;

&lt;h1 id=&quot;algorithm&quot;&gt;algorithm&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;find nodes indegree == 0&lt;/li&gt;
  &lt;li&gt;insert q&lt;/li&gt;
  &lt;li&gt;Iterate until all nodes are checked.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;문제-줄세우기&quot;&gt;문제: 줄세우기&lt;/h2&gt;
&lt;p&gt;N명의 학생들을 키 순서대로 줄을 세우려고 한다. 각 학생의 키를 직접 재서 정렬하면 간단하겠지만, 마땅한 방법이 없어서 두 학생의 키를 비교하는 방법을 사용하기로 하였다. 그나마도 모든 학생들을 다 비교해 본 것이 아니고, 일부 학생들의 키만을 비교해 보았다.&lt;/p&gt;

&lt;p&gt;일부 학생들의 키를 비교한 결과가 주어졌을 때, 줄을 세우는 프로그램을 작성하시오.&lt;/p&gt;

&lt;h3 id=&quot;입력&quot;&gt;입력&lt;/h3&gt;
&lt;p&gt;첫째 줄에 N(1≤N≤32,000), M(1≤M≤100,000)이 주어진다. M은 키를 비교한 회수이다. 다음 M개의 줄에는 키를 비교한 두 학생의 번호 A, B가 주어진다. 이는 학생 A가 학생 B의 앞에 서야 한다는 의미이다.&lt;/p&gt;

&lt;p&gt;학생들의 번호는 1번부터 N번이다.&lt;/p&gt;

&lt;h3 id=&quot;출력&quot;&gt;출력&lt;/h3&gt;
&lt;p&gt;첫째 줄부터 앞에서부터 줄을 세운 결과를 출력한다. 답이 여러 가지인 경우에는 아무거나 출력한다.&lt;/p&gt;

&lt;h3 id=&quot;정답-코드&quot;&gt;정답 코드&lt;/h3&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;vector&amp;gt;
#include&amp;lt;algorithm&amp;gt;
#include&amp;lt;queue&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;font size=&quot;6&quot;&gt;Refernce&lt;/font&gt;
  &lt;ul&gt;
    &lt;li&gt;https://math.stackexchange.com/questions/3232341/prove-that-a-directed-graph-with-no-cycles-has-at-least-one-node-of-indegree-zer&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>조원빈</name></author><category term="algorithm" /><category term="DAG" /><category term="traveling" /><category term="search" /><category term="algorithm" /><summary type="html"></summary></entry><entry><title type="html">scheduling</title><link href="http://localhost:4000/algorithm/scheduling/" rel="alternate" type="text/html" title="scheduling" /><published>2020-10-17T00:00:00+09:00</published><updated>2020-10-17T05:00:00+09:00</updated><id>http://localhost:4000/algorithm/scheduling</id><content type="html" xml:base="http://localhost:4000/algorithm/scheduling/">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;activity-selection-problem&quot;&gt;activity selection problem&lt;/h1&gt;

&lt;p&gt;\(n\)개의 팀이 회의하고 싶은 시간을 제출했다고 했을 때 한 개의 회의실에서 선택할 수 있는 최대 회의 개수는?&lt;/p&gt;

&lt;p&gt;\(input\): \(j_1, j_2, j_3, ... j_n\) (\(j_i = (s_i, f_i)\))&lt;br /&gt;
\(output\): maximum number of scheduled interval.&lt;/p&gt;

&lt;h2 id=&quot;알고리즘&quot;&gt;알고리즘&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;목록 \(S\)에 남는 회의 중 가장 일찍 끝나는 회의 \(S_{min}\)을 선택한다.&lt;/li&gt;
  &lt;li&gt;\(S_{min}\)과 겹치는 회의를 \(S\)에서 모두 지운다.&lt;/li&gt;
  &lt;li&gt;\(S\)가 텅빌 때까지 반복한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;정확성-증명&quot;&gt;정확성 증명&lt;/h2&gt;
&lt;p&gt;\(Claim\): 가장 종료 시간이 빠른 회의(\(S_{min}\))를 포함하는 최적해가 반드시 존재한다.&lt;/p&gt;

&lt;p&gt;\(Proof\):
\(S\)의 최적해 중 \(S_{min}\)을 포함하지 않은 해가 있다고 가정하자. 이 답은 서로 겹치지 않은 회의 목록이다.
이 목록에서 첫 번째로 개최되는 회의를 지우고 \(S_{min}\)을 대신 추가해 새로운 목록을 만든다하자.
\(S_{min}\)은 S에서 가장 일찍 끝나는 회의이기 때문에 겹치지 않고 새로 만든 목록 또한 최적해이다.
따라서 \(S_{min}\)을 선택해 최적해를 항상 구할 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;interval-partitioning&quot;&gt;Interval Partitioning&lt;/h1&gt;

&lt;p&gt;\(input\): \(j_1, j_2, j_3, ... j_n\) (\(j_i = (s_i, f_i)\))&lt;br /&gt;
\(output\): find minimum number of classroom to schedule all lectures so that no two occur at the same time in the same room&lt;/p&gt;

&lt;h2 id=&quot;알고리즘-1&quot;&gt;알고리즘&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Algorithm Interval Partition {
    Sort all intervals by start time

    While there are intervals left {
        Let i be the next one

        If there is an existing classroom whose
        schedule is compatible with i {
            Add i to the compatible classroom that has been
            free for the longest time
        }
        Else {
            Create a new classroom and add i to it
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;font size=&quot;6&quot;&gt;Refernce&lt;/font&gt;
  &lt;ul&gt;
    &lt;li&gt;https://stumash.github.io/Algorithm_Notes/greedy/intervals/intervals.html&lt;/li&gt;
    &lt;li&gt;구종만 지음, 알고리즘 문제 해결 전략, 인사이트, 9장&lt;br /&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>조원빈</name></author><category term="algorithm" /><category term="greedy" /><category term="algorithm" /><summary type="html"></summary></entry><entry><title type="html">dynamic programming</title><link href="http://localhost:4000/algorithm/dynamic_programming/" rel="alternate" type="text/html" title="dynamic programming" /><published>2020-10-17T00:00:00+09:00</published><updated>2020-10-17T05:00:00+09:00</updated><id>http://localhost:4000/algorithm/dynamic_programming</id><content type="html" xml:base="http://localhost:4000/algorithm/dynamic_programming/">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;knapsack-problem&quot;&gt;knapsack problem&lt;/h1&gt;

&lt;h2 id=&quot;문제-정의&quot;&gt;문제 정의&lt;/h2&gt;

&lt;p&gt;도둑이 보석가게에 배낭을 메고 침입했다.
배낭의 최대 용량은 W이며, 이를 초과해서 보석을 담으면 배낭이 찢어질 것이다.
각 보석들의 무게와 가격은 알고 있다.
배낭이 찢어지지 않는 선에서 가격 합이 최대가 되도록 보석을 담는 방법은?&lt;/p&gt;

&lt;p&gt;\(input\): \(W\), \((w_1,v_1), (w_2,v_2) ... ,(w_n,v_n)\) &lt;br /&gt;
\(output\): the maximum value V less than or equal to W&lt;/p&gt;

&lt;h2 id=&quot;점화식&quot;&gt;점화식&lt;/h2&gt;

\[DP[i][w] =  \begin{cases} DP[i - 1][w]  &amp;amp; \text{if }w_i &amp;gt; w \\ max(v_i + DP[i-1][w-w_i], DP[i-1][w])   &amp;amp; else \end{cases}\]

&lt;h1 id=&quot;fibonacci&quot;&gt;Fibonacci&lt;/h1&gt;

&lt;h2 id=&quot;점화식-1&quot;&gt;점화식&lt;/h2&gt;
&lt;p&gt;\(F_n =  \begin{cases} 0  &amp;amp; \text{if }n = 0 \\ 1   &amp;amp; \text{if }n = 1 \\ F_{n-1} + F_{n-2}   &amp;amp; \text{if }n &amp;gt; 1 \end{cases}\)&lt;/p&gt;

&lt;h1 id=&quot;팰린드롬&quot;&gt;팰린드롬?&lt;/h1&gt;

&lt;h2 id=&quot;문제-정의-1&quot;&gt;문제 정의&lt;/h2&gt;
&lt;p&gt;명우는 홍준이와 함께 팰린드롬 놀이를 해보려고 한다.&lt;/p&gt;

&lt;p&gt;먼저, 홍준이는 자연수 N개를 칠판에 적는다. 그 다음, 명우에게 질문을 총 M번 한다.&lt;/p&gt;

&lt;p&gt;각 질문은 두 정수 S와 E(1 ≤ S ≤ E ≤ N)로 나타낼 수 있으며, S번째 수부터 E번째 까지 수가 팰린드롬을 이루는지를 물어보며, 명우는 각 질문에 대해 팰린드롬이다 또는 아니다를 말해야 한다.&lt;/p&gt;

&lt;p&gt;https://www.acmicpc.net/problem/10942&lt;/p&gt;

&lt;h2 id=&quot;점화식-2&quot;&gt;점화식&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/pdrom.PNG&quot; alt=&quot;이미지1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;코드&quot;&gt;코드&lt;/h2&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//FAST IO&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ios_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_with_stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//dp&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//It should be noted here that the order in which DP matrices are filled is diagonal,&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;//which creates a lower triangulation matrix.&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>조원빈</name></author><category term="algorithm" /><category term="dp" /><category term="algorithm" /><summary type="html"></summary></entry><entry><title type="html">tree diameter</title><link href="http://localhost:4000/algorithm/tree_diameter/" rel="alternate" type="text/html" title="tree diameter" /><published>2020-10-11T00:00:00+09:00</published><updated>2020-10-11T05:00:00+09:00</updated><id>http://localhost:4000/algorithm/tree_diameter</id><content type="html" xml:base="http://localhost:4000/algorithm/tree_diameter/">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;트리의-지름&quot;&gt;트리의 지름&lt;/h1&gt;
&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;
&lt;p&gt;트리(tree)는 사이클이 없는 무방향 그래프이다. 트리에서는 어떤 두 노드를 선택해도 둘 사이에 경로가 항상 하나만 존재하게 된다. 트리에서 어떤 두 노드를 선택해서 양쪽으로 쫙 당길 때, 가장 길게 늘어나는 경우가 있을 것이다. 이럴 때 트리의 모든 노드들은 이 두 노드를 지름의 끝 점으로 하는 원 안에 들어가게 된다.&lt;/p&gt;

&lt;p&gt;이런 두 노드 사이의 경로의 길이를 트리의 지름이라고 한다. 정확히 정의하자면 트리에 존재하는 모든 경로들 중에서 가장 긴 것의 길이를 말한다.&lt;/p&gt;

&lt;p&gt;입력으로 루트가 있는 트리를 가중치가 있는 간선들로 줄 때, 트리의 지름을 구해서 출력하는 프로그램을 작성하시오. 아래와 같은 트리가 주어진다면 트리의 지름은 45가 된다.&lt;/p&gt;

&lt;h2 id=&quot;입력&quot;&gt;입력&lt;/h2&gt;

&lt;p&gt;파일의 첫 번째 줄은 노드의 개수 n(1 ≤ n ≤ 10,000)이다. 둘째 줄부터 n-1개의 줄에 각 간선에 대한 정보가 들어온다. 간선에 대한 정보는 세 개의 정수로 이루어져 있다. 첫 번째 정수는 간선이 연결하는 두 노드 중 부모 노드의 번호를 나타내고, 두 번째 정수는 자식 노드를, 세 번째 정수는 간선의 가중치를 나타낸다. 간선에 대한 정보는 부모 노드의 번호가 작은 것이 먼저 입력되고, 부모 노드의 번호가 같으면 자식 노드의 번호가 작은 것이 먼저 입력된다. 루트 노드의 번호는 항상 1이라고 가정하며, 간선의 가중치는 100보다 크지 않은 양의 정수이다.&lt;/p&gt;

&lt;h2 id=&quot;출력&quot;&gt;출력&lt;/h2&gt;

&lt;p&gt;첫째 줄에 트리의 지름을 출력한다.&lt;/p&gt;

&lt;h2 id=&quot;증명&quot;&gt;증명&lt;/h2&gt;

&lt;p&gt;\(Claim:\)
루트에서 가장 멀리 떨어진 노드 \(A\)에 대해 \(A\)와 가장 멀리 떨어진 노드 \(B\)가 존재한다 하자.
경로 \(\overline {AB}\)는 트리의 지름이다.&lt;/p&gt;

&lt;p&gt;\(\overline {RA}\)는 루트에서 \(A\)가지 경로이고 이는 루트에서 시작하는 가장 긴 경로이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/diameter1.png&quot; alt=&quot;이미지1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이때, 정점 \(A,B\) 는 항상 최소공통조상 \(L\) 을 갖는다.
따라서, \(\overline {AB} = \overline {AL} + \overline {LB}\) 이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/diameter2.png&quot; alt=&quot;이미지3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;\(\overline {AB}\)가 트리의 지름이 아니라 가정하면&lt;/p&gt;

\[DP[S][E] = \begin{cases} true &amp;amp; \text{if }S = E \\ n[E] = n[S] &amp;amp; \text{if }E - S = 1 \\ n[E] = n[S] \ and \ DP[S + 1][E - 1] &amp;amp; \text{else } \end{cases}\]

&lt;h3 id=&quot;lowest-common-ancestor&quot;&gt;Lowest Common Ancestor&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/lcaexample.png&quot; alt=&quot;이미지2&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Common Ancestor(공통조상)&lt;/code&gt;란 트리에서 정점 \(v,u\)에 대해 둘을 자손으로 가지는 노드를 의미한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lowest Common Ancestor(최소공통조상)&lt;/code&gt;란 공통 조상 중 루트에서 가장 멀리 떨어진 노드를 의미한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 그림에서는 노드 ‘2’가 최소공통조상이다.&lt;/p&gt;</content><author><name>조원빈</name></author><category term="algorithm" /><category term="greedy" /><category term="algorithm" /><summary type="html"></summary></entry><entry><title type="html">covex hull</title><link href="http://localhost:4000/algorithm/covex_hull/" rel="alternate" type="text/html" title="covex hull" /><published>2020-10-09T00:00:00+09:00</published><updated>2020-10-17T05:00:00+09:00</updated><id>http://localhost:4000/algorithm/covex_hull</id><content type="html" xml:base="http://localhost:4000/algorithm/covex_hull/">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;graham-scan&quot;&gt;Graham Scan&lt;/h1&gt;

&lt;h2 id=&quot;pseudo-code&quot;&gt;pseudo code&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sort by y-order; //$$p_1, p_2, ..., p_n$$
stack.push($$p_1, p_2$$);
for i = 3 to $$n$$ do
  while next $$\angle next, top, $$p_i$$ != CCW
    stack.pop()
  stack.push($$p_i$$)
return stack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;analysis-of-graham-scan&quot;&gt;Analysis of Graham Scan&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Invariant \(&amp;lt;p_1, ... ,stack.top()&amp;gt;\) is convex&lt;/li&gt;
  &lt;li&gt;기울기 공식:
\(D = det\begin{vmatrix} 1 &amp;amp; p_x &amp;amp; p_y \\ 1 &amp;amp; q_x &amp;amp; q_y \\ 1 &amp;amp; r_x &amp;amp; r_y \end{vmatrix}\)
    &lt;ul&gt;
      &lt;li&gt;if \(D &amp;gt; 0\) then \(\angle p, q, r\) is CCW&lt;/li&gt;
      &lt;li&gt;else if \(D &amp;lt; 0\) \(\angle p, q, r\) is CW&lt;/li&gt;
      &lt;li&gt;else then \(\angle p, q, r\) is straight&lt;/li&gt;
      &lt;li&gt;\(D = p \cdot (q \times r)\) 이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;정렬 이후 \(O(n)\)번의 스캔이 일어나며 반복 수행마다 \(logn\)의 시간 소요
    &lt;ul&gt;
      &lt;li&gt;time complexity: \(O(nlogn)\)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;divide-and-conquer&quot;&gt;Divide and Conquer&lt;/h1&gt;

&lt;h2 id=&quot;pseudo-code-1&quot;&gt;pseudo code&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/merging.PNG&quot; alt=&quot;이미지1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sort by x-order&lt;/li&gt;
  &lt;li&gt;Let \(A\) be the set of \(n/2\) leftmost points and \(B\) the set of \(n/2\) rightmost points&lt;/li&gt;
  &lt;li&gt;Reculsively compute \(CovexHull(A)\) and \(ConvexHull(B)\)&lt;/li&gt;
  &lt;li&gt;Merge to obtain CovexHull(S)
    &lt;ul&gt;
      &lt;li&gt;a = rightmost point of \(CovexHull(A)\)&lt;/li&gt;
      &lt;li&gt;b = leftmost point of \(ConvexHull(B)\)&lt;/li&gt;
      &lt;li&gt;while \(\overline{ab}\) not lower tangent of \(CovexHull(A)\) and \(ConvexHull(B)\)
        &lt;ol&gt;
          &lt;li&gt;while \(\overline{ab}\) not lower tangent to :\(ConvexHull(A)\)
            &lt;ul&gt;
              &lt;li&gt;set \(a = a-1\)(move \(a\) \(CW\))&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;while \(\overline{ab}\) not lower tangent to :\(ConvexHull(B)\)
            &lt;ul&gt;
              &lt;li&gt;set \(b = b+1\)(move \(b\) \(CCW\))&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;return \(\overline{ab}\)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;analysis-of-divide-and-conquer&quot;&gt;Analysis of Divide and conquer&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;처음 정렬에 걸리는 시간 \(O(nlong)\)&lt;/li&gt;
  &lt;li&gt;. \(T(N) = 2T(N/2) + O(N)\)&lt;/li&gt;
  &lt;li&gt;Merge 즉, 합치는 데 걸리는 시간은 선형이다.&lt;/li&gt;
  &lt;li&gt;마스터 정리에 의하여 \(T(N) = O(nlogn)\)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;font size=&quot;6&quot;&gt;Refernce&lt;/font&gt;
  &lt;ul&gt;
    &lt;li&gt;https://sites.cs.ucsb.edu/~suri/cs235/ConvexHull.pdf&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>조원빈</name></author><category term="algorithm" /><category term="divide and conquer" /><category term="algorithm" /><summary type="html"></summary></entry><entry><title type="html">closest pair</title><link href="http://localhost:4000/algorithm/closest_pair/" rel="alternate" type="text/html" title="closest pair" /><published>2020-10-09T00:00:00+09:00</published><updated>2020-10-09T05:00:00+09:00</updated><id>http://localhost:4000/algorithm/closest_pair</id><content type="html" xml:base="http://localhost:4000/algorithm/closest_pair/">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;definition&quot;&gt;definition&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;input: \(p_1, p_2, p_3, ... p_n\)  \((p_i = (x_i, y_i))\)&lt;/li&gt;
  &lt;li&gt;output: \(p_i, p_j\) with smallest \(p_i - p_j\)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;brute-force-algorithm&quot;&gt;Brute-force algorithm&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;minDist = infinity
for i = 1 to length(P) - 1 do
    for j = i + 1 to length(P) do
        let p = P[i], q = P[j]
        if dist(p, q) &amp;lt; minDist  then
            minDist = dist(p, q)
            closestPair = (p, q)
return closestPair
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;time complexity: \(O(n^2)\)&lt;/p&gt;

&lt;h1 id=&quot;divide-and-conquer-algorithm&quot;&gt;Divide and Conquer algorithm&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;점들을 x좌표에 따라 정렬한다.&lt;/li&gt;
  &lt;li&gt;점들이 두개의 같은 크기의 집합으로 나뉘도록 수직선 \(x = x_mid\)를 기준으로 양옆으로 분할한다.&lt;/li&gt;
  &lt;li&gt;왼쪽과 오른쪽의 점들의 집합에 대해 재귀적으로 문제를 해결한다. 이것을 통해 왼쪽과 오른쪽에서의 최근접 거리인 \(d_{Lmin}\)과 \(d_{Rmin}\)을 찾을 수 있다.&lt;/li&gt;
  &lt;li&gt;분할선 기준으로 나뉜 쌍들이 존재할 수 있으므로 중간에 존재하는 쌍들 중 거리가 최소가 되는 \(d_{LRmin}\)을 구한다.&lt;/li&gt;
  &lt;li&gt;최종적으로 찾고자 하는 최근접 거리는 \(d = min(d_{Lmin}, d_{Rmin}, d_{LRmin})\)이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;time-complexity&quot;&gt;time complexity&lt;/h2&gt;

&lt;p&gt;시간복잡도의 가장 영향을 미치는 부분인 4번 항목에 대해 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/closestpair.png&quot; alt=&quot;이미지1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우선 먼저 생각해야하는 것은 최악의 경우에도 \(d = min(d_{Lmin}, d_{Rmin})\) band 내에서는 \(n^2\) 미만의 점을 가진다.
또한 각점에 대해 반대편에 확인해야 할 점의 개수는 최대 6개이다. 따라서, \(6n\)의 계산시간이 필요하다. 이에 대한 자세한 설명은 아래 &lt;a href=&quot;#lemma&quot;&gt;Lemma 항목&lt;/a&gt;을 참고&lt;/p&gt;

&lt;p&gt;이 알고리즘의 연산의 수행 횟수를 재귀식으로 표현한다면 \(T(n) = 2T(n/2) + O(n)\)으로 표현할 수 있으며 마스터 정리에 따라 \(O(nlogn)\)이다.&lt;/p&gt;

&lt;h3 id=&quot;lemma&quot;&gt;Lemma&lt;/h3&gt;

&lt;p&gt;\(Claim\):
A rectangle of width \(d\) and height \(2d\) can contain at most six points such that any two points are at distance at least \(d\)&lt;/p&gt;

&lt;p&gt;\(Proof\):
This will be an intuitive proof by construction. We shall begin to place points into the box until it is impossible to add any more. First imagine a circle of radius d around each point representing the area that we are not allowed to insert another point into. We can minimize the overlapping area of such a circle with the rectangle by placing the point on the corner of the rectangle as in the following figure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/figbox1.gif&quot; alt=&quot;이미지2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hence we can place points somewhere inside the light blue area or on the edges of the circles. Hence we put one more in the middle of the left side leaving the entire box covered except for the remaining two corners and the middle of the right side (all three of these points being right on the boundaries of the circles). Once we do this we have the following structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/figbox2.gif&quot; alt=&quot;이미지3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that there are now six points in the square. If you try to move any one of these points in any direction within the boundaries of the rectangle, then you would be moving two points too close toghether.&lt;/p&gt;

&lt;p&gt;Hence we can’t possibly add any more points to this rectangle without putting violating the distance property between the points. Therefore six is the maximum number of points we can have.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;font size=&quot;6&quot;&gt;Refernce&lt;/font&gt;
  &lt;ul&gt;
    &lt;li&gt;https://en.wikipedia.org/wiki/Closest_pair_of_points_problem&lt;/li&gt;
    &lt;li&gt;https://sites.cs.ucsb.edu/~suri/cs235/ClosestPair.pdf&lt;/li&gt;
    &lt;li&gt;https://www.cs.mcgill.ca/~cs251/ClosestPair/proofbox.html&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>조원빈</name></author><category term="algorithm" /><category term="divide and conquer" /><category term="algorithm" /><summary type="html"></summary></entry><entry><title type="html">Nouvelle Vague</title><link href="http://localhost:4000/nodejs/Nouvelle_Vague/" rel="alternate" type="text/html" title="Nouvelle Vague" /><published>2020-10-08T00:00:00+09:00</published><updated>2020-09-24T04:00:00+09:00</updated><id>http://localhost:4000/nodejs/Nouvelle_Vague</id><content type="html" xml:base="http://localhost:4000/nodejs/Nouvelle_Vague/">&lt;h1 id=&quot;개요&quot;&gt;개요&lt;/h1&gt;

&lt;h1 id=&quot;알게된-것&quot;&gt;알게된 것&lt;/h1&gt;

&lt;h2 id=&quot;https-security---should-password-be-hashed-server-side-or-client-side&quot;&gt;https security - should password be hashed server-side or client-side?&lt;/h2&gt;
&lt;p&gt;https://security.stackexchange.com/questions/8596/https-security-should-password-be-hashed-server-side-or-client-side&lt;/p&gt;

&lt;h2 id=&quot;login-css-design&quot;&gt;login css design&lt;/h2&gt;
&lt;p&gt;https://doctorcodetutorial.blogspot.com/2019/07/make-animated-signup-form-using-html.html&lt;/p&gt;

&lt;h2 id=&quot;sequelize-validation&quot;&gt;sequelize validation&lt;/h2&gt;
&lt;p&gt;https://sequelize.org/master/manual/validations-and-constraints.html&lt;/p&gt;

&lt;h2 id=&quot;jwt-토큰은-어디에-저장하는게-좋을까&quot;&gt;JWT 토큰은 어디에 저장하는게 좋을까?&lt;/h2&gt;
&lt;p&gt;https://lazyhoneyant.tistory.com/&lt;/p&gt;

&lt;p&gt;https://stormpath.com/blog/where-to-store-your-jwts-cookies-vs-html5-web-storage#:~:text=JWT%20sessionStorage%20and%20localStorage%20Security,site%20scripting%20(XSS)%20attacks.&lt;/p&gt;

&lt;h2 id=&quot;session-storage-is-evil&quot;&gt;Session Storage is Evil&lt;/h2&gt;
&lt;p&gt;https://liferay.dev/blogs/-/blogs/session-storage-is-evil&lt;/p&gt;

&lt;h2 id=&quot;how-to-log-out-when-using-jwt&quot;&gt;How to log out when using JWT&lt;/h2&gt;
&lt;p&gt;https://medium.com/devgorilla/how-to-log-out-when-using-jwt-a8c7823e8a6&lt;/p&gt;

&lt;h2 id=&quot;multer-upload-multiple-files&quot;&gt;multer upload multiple files&lt;/h2&gt;
&lt;p&gt;https://www.zerocho.com/category/NodeJS/post/5950a6c4f7934c001894ea83&lt;/p&gt;

&lt;h2 id=&quot;http-authentication&quot;&gt;HTTP authentication&lt;/h2&gt;
&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication&lt;/p&gt;

&lt;h2 id=&quot;비동기-반복문을-동기식으로-진행하는-방법&quot;&gt;비동기 반복문을 동기식으로 진행하는 방법&lt;/h2&gt;
&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await…of&lt;/p&gt;

&lt;h2 id=&quot;upload-design&quot;&gt;upload design&lt;/h2&gt;
&lt;p&gt;https://speckyboy.com/custom-file-upload-fields/&lt;/p&gt;

&lt;h2 id=&quot;sass&quot;&gt;Sass&lt;/h2&gt;
&lt;p&gt;https://eunsukim.me/posts/understanding-basic-sass&lt;/p&gt;</content><author><name>조원빈</name></author><category term="nodejs" /><category term="nodejs" /><category term="projects" /><summary type="html">개요</summary></entry></feed>