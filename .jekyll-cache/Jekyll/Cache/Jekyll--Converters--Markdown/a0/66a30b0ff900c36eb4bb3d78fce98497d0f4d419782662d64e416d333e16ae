I"W"<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML">
</script>

<h1 id="인덱스란">인덱스란?</h1>

<p>인덱스란 단순히 생각하면 사전 순 정렬이다. 사전 같은 경우 미리 순서대로 정렬되어 있어 쉽게 찾을 수 있도록(데이터를 읽을 수 있도록) 도와준다. 마찬가지로 <code class="language-plaintext highlighter-rouge">DBMS</code>의 인덱스도 컬럼의 값을 주어진 순서로 미리 정렬해 보관한다.</p>

<p>자료구조를 어느정도 이해하고 있다면, 알 수 있듯이 위와 같이 미리 정렬된 저장구조는 읽기 성능을 끌어올리는 방법으로써 수정, 삭제, 삽입의 시간이 매우 크게 희생될 수 있다.</p>

<blockquote>
  <p>여기서도 알 수 있듯이 테이블의 인덱스를 하나 더 추가할지 말지는 데이터의 저장 속도를 어디까지 희생할 수 있는지, 읽기 속도를 얼마나 더 빠르게 만들어야 하는지의 여부에 따라 결정돼야 합니다. SELECT 쿼리 문장의 WHERE 조건절에 사용되는 컬럼이라고 전부 인덱스로 생성하면 데이터 저장 성능이 떨어지고 인덱스의 크기가 비대해져서 오히려 역효과만 불러올 수 있습니다.</p>
</blockquote>

<h1 id="b-tree">B-tree</h1>
<p>가장 일반적으로, 가장 먼저 사용된 인덱스 알고리즘으로써, 칼럼의 값을 변형하지 않고 원래의 값을 이용해 인덱싱하는 알고리즘이다.
<code class="language-plaintext highlighter-rouge">B+-Tree</code> 혹은 <code class="language-plaintext highlighter-rouge">B*-Tree</code>가 자주 사용되며, 약자 B는 balanced를 의미한다.</p>

<h2 id="구조-및-특성">구조 및 특성</h2>
<p><code class="language-plaintext highlighter-rouge">B-Tree</code>는 컬럼의 값을 변형시키지 않고 인덱스 구조체 내에서 항상 정렬된 상태로 유지하고 있다.</p>

<p>기본적으로 루트노드, 브랜치노드, 리프노드로 형성된 계층구조로 나뉘어져 있다.
데이터베이스 내에서는 인덱스와 실제 데이터가 저장된 데이터는 따로 관리하는데, 인덱스의 리프 노드는 실제 데이터 레코드를 찾아가기 위한 주소 값을 가지고 있다.</p>

<p>대부분 <code class="language-plaintext highlighter-rouge">RDBMS</code>의 데이터 파일에서 레코드는 특정 기준으로 정렬되지 않고 임의의 순서대로 저장된다. 하지만 <code class="language-plaintext highlighter-rouge">InnoDB</code>에서는 클러스터링돼 디스크에 저장하는 것을 기본으로 하기에 프라이머리 키 순서대로 정렬한 후 저장된다.
다른 <code class="language-plaintext highlighter-rouge">DBMS</code>에서는 선택 사항이지만 별도의 옵션이 없다면 기본적으로 클러스터링 테이블이 생성된다.</p>

<p><code class="language-plaintext highlighter-rouge">InnoDB</code> 테이블에서는 프라이머리 키에 의해 클러스터링되기 때문에 프라이머리 키값 자체가 주소 역할을 한다. 실제 <code class="language-plaintext highlighter-rouge">MySQL</code> 테이블의 인덱스는 항상 인덱스 컬럼 값과 주소 값(<code class="language-plaintext highlighter-rouge">MyISAM</code>의 레코드 아이디 값 또는 <code class="language-plaintext highlighter-rouge">InnoDB</code>의 프라이머리 키값)의 조합이 인덱스 레코드로 구성됩니다.</p>

<p><img src="/assets/images/B_Tree_Structure.png" alt="이미지" /></p>

<h2 id="b-tree-properties">B-tree Properties</h2>

<ol>
  <li>모든 리프 노드들은 같은 높이에 있다.</li>
  <li>order가 m인 경우 m-1개의 키와 m개의 자식 노드를 가질 수 있다.</li>
  <li>모든 노드는 최대 m개의 노드를 자식으로 가질 수 있다.</li>
  <li>루트 노드는 반드시 두 개 이상의 노드를 가지고 있어야 한다.</li>
  <li>루트 노드와 리프 노드를 제외한 노드는 최소 두 개의(m/2) 자식 노드를 가진다.</li>
  <li>ROOT 노드를 제외한 모든 노드는 적어도 ⌊ M/2 ⌋ 개의 키를 가지고 있어야 한다.</li>
</ol>

<h2 id="탐색">탐색</h2>

<p><img src="/assets/images/B-tree-1.png" alt="이미지2" /></p>

<p>탐색과정은 이진 탐색 트리와 매우 흡사하다. 위 트리를 예시로 들어 \(3\)을 찾는다고 하자.</p>

<ol>
  <li>\(3&lt;\), \(3&lt;15\) 이므로 왼쪽 서브 트리를 탐색한다.</li>
  <li>\(3&lt;4\) 이므로 다시 왼쪽 서브 트리를 탐색한다.</li>
  <li>\(3&gt;2\), \(3=3\)이므로 탐색을 종료한다.</li>
</ol>

<p>위 탐색과정에서 알 수 있듯이 탐색은 트리의 높이에 의존한다. 보통 탐색 시간은 \(O(log N)\) 정도.</p>

<h2 id="삽입">삽입</h2>

<ol>
  <li>삽입할 위치를 탐색한다.</li>
  <li>리프 노드가 \(m-1\)개 이하의 키를 가지고 있다면 오름차순으로 값을 삽입한다.</li>
  <li>키가 \(m-1\)일 경우
    <ul>
      <li>새로운 값을 오름차순으로 삽입한다.</li>
      <li>중간 값을 기준으로 두개의 노드로 나눈다.</li>
      <li>중간 값을 부모 노드로 보낸다.</li>
      <li>부모 노드의 키가 \(m-1\)개라면 적절한 리프 노드를 찾을 때까지 위 과정을 반복한다.</li>
    </ul>
  </li>
  <li>삽입이 완료된다.</li>
</ol>

<p>1 -&gt; 10 -&gt; 5 -&gt; 14 -&gt; 123 -&gt; 7 -&gt; 8
아래 이미지는 위 순서대로 삽입할 경우 생성되는 트리 구조이다.</p>

<p><img src="/assets/images/b-tree-2.png" alt="이미지3" /></p>

<h2 id="삭제">삭제</h2>

<p>삭제 방식에는 두 가지가 존재.</p>

<ol>
  <li>삭제 후 invariants를 유지하도록 트리를 재구성</li>
  <li>Do a single pass down the tree, but before entering (visiting) a node, restructure the tree so that once the key to be deleted is encountered, it can be deleted without triggering the need for any further restructuring.</li>
</ol>

<p>삭제할 경우 특이케이스는 아래와 같다.</p>
<ol>
  <li>브랜치 노드의 삭제할 원소가 자식 노드들의 구분자일 경우</li>
  <li>원소를 삭제할 경우 해당 노드가 원소 최소개수와 자식 수를 만족하지 못할 경우</li>
</ol>

<h3 id="리프-노드-삭제">리프 노드 삭제</h3>

<ol>
  <li>삭제할 값을 찾는다.</li>
  <li>만약 값이 리프 노드에 있다면 그 노드를 삭제한다.</li>
  <li>b-tree 구조를 만족시키지 못할 경우 <code class="language-plaintext highlighter-rouge">Rebalancing after deletion</code> 항목에 따라 재구성한다.</li>
</ol>

<h3 id="브랜치-노드-삭제">브랜치 노드 삭제</h3>

<p>브랜치 노드의 값은 항상 서브트리의 구분자로서 역할을 하기 때문에, 구분자의 역할을 대체할 필요가 있다. 여기서 알아야 할 점은 왼쪽 서브트리의 가장 큰 값은 항상 구분자보다 작고 오른쪽 서브트리의 가장 작은 값은 항상 구분자보다 크다는 점이다.</p>

<ol>
  <li>새로운 구분자를 찾는다. (왼쪽 서브트리 최대값 혹은 오른쪽 서브트리 최소값) 리프 노드에서 값을 제거 후 새로운 구분자를 추가한다.</li>
  <li>리프 노드에서 삭제된 경우로 인해 트리의 균형이 깨졌다면 <code class="language-plaintext highlighter-rouge">Rebalancing after deletion</code>에 따라 재구성한다.</li>
</ol>

<h3 id="rebalancing-after-deletion">Rebalancing after deletion</h3>

<ol>
  <li>삭제할 키 값을 가진 노드를 찾는다.</li>
  <li>노드의 키 개수가 m/2 보다 크다 키를 삭제한다.</li>
  <li>노드의 키 개수가 m/2이 아니라면 트리 구조를 유지하기 위해 왼쪽 혹은 오른쪽 서브트리에서 키 값을 가져와야 한다.
    <ul>
      <li>왼쪽 서브트리가 m/2개 이상의 키를 가지고 있다면 가장 큰 값을 밀어 넣은 후 키값이 삭제된 곳에 새로운 구분자를를 이동시킨다.</li>
      <li>오른쪽 서브트리가 m/2개 이상의 키를 가지고 있다면 가장 작은 값을 밀어 넣는 후 키값이 삭제된 곳에 <code class="language-plaintext highlighter-rouge">intervening element</code>를 이동시킨다.</li>
    </ul>
  </li>
</ol>

<blockquote>
  <font size="6">Refernce</font>
  <ul>
    <li>https://12bme.tistory.com/138</li>
    <li>SQLD 개발자 가이드, http://www.dbguide.net/index.db</li>
    <li>https://www.softwaretestinghelp.com/b-tree-data-structure-cpp/</li>
    <li>https://www.cs.usfca.edu/~galles/visualization/BTree.html</li>
    <li>https://matice.tistory.com/8</li>
    <li>https://en.wikipedia.org/wiki/B-tree</li>
  </ul>
</blockquote>
:ET