I"\+<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML">
</script>

<h1 id="모델">모델</h1>
<p>모델은 목적에 부합하는 모방이라 할 수 있다.</p>

<blockquote>
  <p>사람이 살아가면서 나타날 수 있는 다양한 현상은 사람 사물 개념 등에 의해 발생된다고 할 수 있으며 모델링은 이것을 표기법에 의해 규칙을 가지고 표기하는 것 자체를 의미한다. 즉 모델을 만들어가는 일 자체를 모델링으로 정의할 수 있다.</p>
</blockquote>

<h2 id="전체-흐름">전체 흐름</h2>

<p>업무파악 -&gt; 개념적 데이터 모델링 -&gt; 논리적 데이터 모델링 -&gt; 물리적 데이터 모델링</p>

<ol>
  <li>개념적 데이터 모델링
    <ul>
      <li>각각의 개념들이 어떻게 상호작용 하는지 확인하는 과정</li>
    </ul>
  </li>
  <li>논리적 데이터 모델링
    <ul>
      <li>개념적 데이터 모델링을 우리가 아는 패러다임으로 변경하는 과정</li>
    </ul>
  </li>
  <li>물리적 데이터 모델링은
    <ul>
      <li>데이터베이스를 선택 후 실제 테이블을 생성하는 과정</li>
    </ul>
  </li>
</ol>

<h2 id="업무-파악">업무 파악</h2>

<p>필요한 것이 무엇인지 파악하기 위해 진행해야하는 단계로써
강의에서는 <code class="language-plaintext highlighter-rouge">Ovenapp</code>을 사용하여 시각화 하는 것을 예시로 알려주었다.</p>

<p>https://ovenapp.io/</p>

<h2 id="개념적-데이터-모델링">개념적 데이터 모델링</h2>

<p><code class="language-plaintext highlighter-rouge">ERD(Entity Relationshop Diagram)</code>를 통해 나타낼 수 있음.</p>

<p>현실을 간단하게 나타낼 수 있는 방법이 무엇이 있을까?
ERD는 우리에게 현실을 3개의 관점에서 볼 수 있게 도와준다.
정보, 정보 그룹, 정보 그룹 사이의 관계. 이를 통해 우리는 추상화된 개념을 볼 수 있을 것이다.
<code class="language-plaintext highlighter-rouge">ERD</code>는 또한 쉽게 <code class="language-plaintext highlighter-rouge">table</code>로 나타낼 수 있다.</p>

<p><img src="/assets/images/relational.png" alt="이미지1" /></p>

<p>위와 아래 중 어떤 것이 관계형 데이터베이스를 표현하기에 적합할까?
정답은 아래이다.
관계형 데이터베이스에서는 내포관계를 표현할 수 없기 때문에 내포관계가 있는 표를 생성할 경우 매우 큰 데이터를 가진 표에 지나지 않을 것이다.
이는 데이터의 중복과 광대한 데이터를 불러오는 데 물리적으로 문제가 있을 수 있다.</p>

<p>아래와 같이 글, 저자, 댓글은 각각 <code class="language-plaintext highlighter-rouge">ERD</code>에서 <code class="language-plaintext highlighter-rouge">Entity</code>라 한다. 이는 이후에 <code class="language-plaintext highlighter-rouge">table</code>이 된다.
글의 본문, 제목, 생성일 등은 <code class="language-plaintext highlighter-rouge">attribute</code>이다. 이는 <code class="language-plaintext highlighter-rouge">column</code>이 된다.
그리고 글에 댓글을 쓰다라는 관계는 <code class="language-plaintext highlighter-rouge">Relation</code>이라 하며 <code class="language-plaintext highlighter-rouge">Primary key</code>, <code class="language-plaintext highlighter-rouge">Foreign key</code></p>

<h3 id="identifier">Identifier</h3>
<p>가지고있는 데이터를 식별하기 위해 고유한 식별자를 사용해야 한다.</p>

<p>데이터가 가지고 있는 <code class="language-plaintext highlighter-rouge">column</code>값에서 식별자 후보군이 될 수 있는 키를 <code class="language-plaintext highlighter-rouge">candidate key</code>라 하며 여기서 선택된 식별자를  <code class="language-plaintext highlighter-rouge">Primary key</code> 그 외는 <code class="language-plaintext highlighter-rouge">alternate key</code>라 한다.
또한, 두 가지 이상의 값을 이용하여 식별할 수 있는 키들은 <code class="language-plaintext highlighter-rouge">composite key</code>라 한다.</p>

<h3 id="cardinality">Cardinality</h3>
<p>1:1
담임 선생님은 반이 하나다. 반은 담임선생님이 하나다.
1:N
저자는 댓글을 여러개 작성할 수 있다. 댓글에게 저자는 하나다.
N:M
저자는 글을 여러개 작성할 수 있다. 글은 여러명의 저자를 가질 수 있다.
N:M 관계는 실제 관계형 구조에서는 쉽게 만들 수 없는 구조이기 때문에 연결테이블을 거쳐 만든다.</p>
<h3 id="optionality">Optionality</h3>
<p>저자는 반드시 댓글을 작성하지(가지지) 않아도 된다. 댓글은 반드시 저자를 가져야 한다. Mandatory:Optional</p>

<h2 id="논리적-데이터-모델링">논리적 데이터 모델링</h2>
<p>개념적 데이터 모델링을 관계형 데이터베이스 패러다임에 어울리는 형태로 변형하는 과정.</p>

<h3 id="mapping-rule">Mapping rule</h3>
<p><code class="language-plaintext highlighter-rouge">ERD</code>를 관계형 데이터베이스에 맞게 변형하기 위한 방법론이다. 설명보다는 간단하게 아래의 표로 생각하는 것이 이해하기 쉬울 것이다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">ERD</th>
      <th style="text-align: left">RDB</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Entity</td>
      <td style="text-align: left">Table</td>
    </tr>
    <tr>
      <td style="text-align: left">Attribute</td>
      <td style="text-align: left">Column</td>
    </tr>
    <tr>
      <td style="text-align: left">Relation</td>
      <td style="text-align: left">PK, FK</td>
    </tr>
  </tbody>
</table>

<h3 id="관계형-데이터-모델-만들기">관계형 데이터 모델 만들기</h3>

<p>아래 <code class="language-plaintext highlighter-rouge">ERD</code>와 <a href="https://aquerytool.com/">aquerytool</a> 툴을 사용하여 만들었다.</p>

<p><img src="/assets/images/ERD.png" alt="이미지2" /></p>

<p><img src="/assets/images/data-modeling.png" alt="이미지3" /></p>

<h3 id="mapping-table">Mapping Table</h3>
<p>N:M관계에서는 특정 테이블이 외래키를 가지는 방식으로 할 경우 필드에 다수의 값이 들어가게 될 것이다.
예를 들어 작성자는 글을 여러개 쓸 수 있으므로 필드에 복수의 키를 가져야 한다.
하지만 이는 관계형 데이터베이스에서 지양하므로 다른 방식을 선택해야 할 것이다.</p>

<p><code class="language-plaintext highlighter-rouge">Mapping Table</code>
작성은 간단하다 단순히 작성자와 글의 키를 가지고 있는 테이블을 생성 후
그 둘 사이를 매핑하는 역할을 하는 것이다.</p>

<h3 id="normalization">Normalization</h3>
<blockquote>
  <p>관계형 데이터베이스의 설계에서 중복을 최소화하게 데이터를 구조화하는 프로세스를 정규화라고 한다.</p>
</blockquote>

<p>정규화 된 단계를 정규형으로 표현하는데 보통은 <code class="language-plaintext highlighter-rouge">3NF</code>까지를 만족할 경우 정규화를 거쳤다 표현한다.
그 이후 단계는 학술적으로 사용되는 단계이기 때문에 우리는 <code class="language-plaintext highlighter-rouge">3NF</code>단계 까지 정규화를 해보도록 하겠다.</p>

<p><img src="/assets/images/normalization.png" alt="이미지4" /></p>

<h4 id="1nf">1NF</h4>
<blockquote>
  <p>각 콜럼들이 서로 <code class="language-plaintext highlighter-rouge">Atomic</code> 해야한다.</p>
</blockquote>

<p>쉽게 말해 각각의 필드에 값이 하나만을 가져야 한다는 의미이다.
아래 표는 정규화 되지 않은 폼이다. 이를 변형하여 정규화 과정을 거쳐보자.</p>

<p>Unormalized form
title	| type	|description	|created	|author_id	|author_name	|author_profile	|price|	tag|
| :————- | :————- | :————- | :————- | :————- | :————- | :————- | :————- | :————- |
MySQL|	paper|	MySQL is …	|2011	|1|	kim	|developer	|10000|	rdb, free|
MySQL|	online	|MySQL is …|	2011	|1|	kim	|developer|	0	|rdb, free|
ORACLE|	paper|	ORACLE is …|	2012|	1	|kim|	developer|	15000|	rdb, commercial|</p>

<p>아래 표는 정규형을 만족시키지만 정보의 중복을 피하지 못한다. 그렇다면 어떻게 해야할까?
정보의 중복을 피하기위해서 가장 쉽게 생각할 수 있는 방식은 테이블을 나누는 것이다.
title	| type	|description	|created	|author_id	|author_name	|author_profile	|price|	tag|
| :————- | :————- | :————- | :————- | :————- | :————- | :————- | :————- | :————- |
MySQL|	paper|	MySQL is …	|2011	|1|	kim	|developer	|10000|	rdb|
MySQL|	paper|	MySQL is …	|2011	|1|	kim	|developer	|10000|	free|</p>

<p>여기서 중요한건 현재 테이블과 topic이 N:M 관계라는 것이다. 앞에서 말했단 <code class="language-plaintext highlighter-rouge">Mapping table</code>을 이용하여 테이블을 나누어야 한다.
title	| type	|description	|created	|author_id	|author_name	|author_profile	|price|
| :————- | :————- | :————- | :————- | :————- | :————- | :————- | :————- |
MySQL|	paper|	MySQL is …	|2011	|1|	kim	|developer	|10000|
MySQL|	online	|MySQL is …|	2011	|1|	kim	|developer|	0	|
ORACLE|	paper|	ORACLE is …|	2012|	1	|kim|	developer|	15000|</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">id</th>
      <th style="text-align: left">name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left">rdb</td>
    </tr>
    <tr>
      <td style="text-align: left">2</td>
      <td style="text-align: left">free</td>
    </tr>
    <tr>
      <td style="text-align: left">3</td>
      <td style="text-align: left">commercial</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">topic_title</th>
      <th style="text-align: left">tag_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">MySQL</td>
      <td style="text-align: left">1</td>
    </tr>
    <tr>
      <td style="text-align: left">MySQL</td>
      <td style="text-align: left">2</td>
    </tr>
    <tr>
      <td style="text-align: left">ORACLE</td>
      <td style="text-align: left">3</td>
    </tr>
    <tr>
      <td style="text-align: left">ORACLE</td>
      <td style="text-align: left">1</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <font size="6">Refernce</font>
  <ul>
    <li>생활코딩, 관계형 데이터 모델링, https://opentutorials.org/course/3883</li>
    <li>SQLD 개발자 가이드, http://www.dbguide.net/index.db</li>
    <li>https://yaboong.github.io/database/2018/03/09/database-normalization-1/</li>
  </ul>
</blockquote>
:ET