I"Z<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML">
</script>

<p>서비스 개발 도중 문득 <code class="language-plaintext highlighter-rouge">put</code> 과 <code class="language-plaintext highlighter-rouge">post</code>의 차이가 분명하지 않아 직접 찾아본 자료들을 정리해둔 글이다.</p>

<p><code class="language-plaintext highlighter-rouge">HTTP API</code> 개발 단계에서 서버 자원을 수정, 추가, 배포하기 위해서는 어떤 메서드를 사용해야 하나? 네트워크 지식이 매우 미흡한 작성자에게는 상당히
어려운 부분이다. 간단한게 말해서 하나도 모른다.</p>

<p>그렇다고 <code class="language-plaintext highlighter-rouge">HTTP</code>의 정의부터 전부 쓰기도 그러니 <a href="https://tools.ietf.org/html/rfc7231#section-4.1">공식 문서(rfc7231)</a>를 참고하여 중요한 토픽 위주로 먼저 정리하려 한다.</p>

<h1 id="common-method-properties">Common Method Properties</h1>
<h2 id="safe-methods">Safe Methods</h2>
<ul>
  <li>간단하게 말해서 사용자의 <code class="language-plaintext highlighter-rouge">GET</code>, <code class="language-plaintext highlighter-rouge">HEAD</code>, <code class="language-plaintext highlighter-rouge">OPTIONS</code> 같은 요청으로 인한 side-effects는 사용자에게 책임을 물을 수 없다는 것이다.</li>
  <li>읽기 전용인 경우 안전한 메서드로 간주한다.</li>
  <li>이를 통해 다른 메서드의 경우에 위험 가능성을 명시한다.</li>
</ul>

<h2 id="idempotent-methods">Idempotent Methods</h2>
<p>우리말로는 멱등성(?)이라는 단어를 사용하던데 상당히 생소하다.</p>

<ul>
  <li>서버 통신 장애로 인해 요청이 반복될 수 있어 <code class="language-plaintext highlighter-rouge">Idempotent Methods</code>는 구분된다,</li>
  <li>여러 번의 요청과 한 번의 요청의 결과가 동일하다면 <code class="language-plaintext highlighter-rouge">Idempotent</code> 하다.</li>
  <li><code class="language-plaintext highlighter-rouge">PUT</code>, <code class="language-plaintext highlighter-rouge">DELETE</code>와 <code class="language-plaintext highlighter-rouge">Safe Method</code>가 여기에 속한다.</li>
</ul>

<h2 id="cacheable-methods">Cacheable Methods</h2>

<p>요청 메서드는 이후 재사용 가능성에 의해 <code class="language-plaintext highlighter-rouge">cacheable</code> 할 수 있다.</p>

<ul>
  <li>일반적으로 권한 요청이 없거나, 현재에 의존성이 없는 <code class="language-plaintext highlighter-rouge">safe method</code>는 <code class="language-plaintext highlighter-rouge">cacheable</code>하다</li>
  <li><code class="language-plaintext highlighter-rouge">GET</code>, <code class="language-plaintext highlighter-rouge">HEAD</code>, <code class="language-plaintext highlighter-rouge">POST</code>는 <code class="language-plaintext highlighter-rouge">cacheable</code>하다.</li>
</ul>

<h1 id="method-definitions">Method Definitions</h1>
<h2 id="post">POST</h2>
<ul>
  <li>HTML 폼에 입력된 필드를 받아 데이터 핸들링을 할 경우</li>
  <li>게시판, 블로그 등의 포스팅</li>
  <li>서버의 새로운 데이터 쓰기</li>
  <li>데이터 추가</li>
</ul>

<p>POST 요청에 대한 응답 <code class="language-plaintext highlighter-rouge">status code</code>는 대부분  being 206 (Partial Content), 304 (Not Modified), and 416 (Range Not Satisfiable)로 정의된다.
새로운 리소스가 서버에 생성되었다면, 201 (Created)를 생성된 리소스에 대한 설명과 식별자를 함께 보낸다.</p>

<p>POST는 <a href="https://tools.ietf.org/html/rfc7234#section-4.2.1"><code class="language-plaintext highlighter-rouge">freshness</code></a> 정보가 정확히 명시되었을 때 <code class="language-plaintext highlighter-rouge">cacheable</code>하다.</p>

<table>
  <tbody>
    <tr>
      <td>Item One</td>
      <td>Item Two</td>
    </tr>
  </tbody>
</table>

<h2 id="put">PUT</h2>
<ul>
  <li>기존 리소스를 대체하거나 새로 생성하는 요청을 주로한다.</li>
  <li>서버는 변환없는 저장, 새로운 데이터를 반영하지 않을 경우 절대로 <code class="language-plaintext highlighter-rouge">ETag</code>, <code class="language-plaintext highlighter-rouge">Last-Modified</code> 같은 <a href="https://tools.ietf.org/html/rfc7231#section-7.2"><code class="language-plaintext highlighter-rouge">alidator header field</code></a>를 보내선 안된다. 이 요건은 사용자 에이전트가 PUT의 결과로 메모리에 있는 바디가 최신 상태를 유지할 때 알 수 있도록 하므로 서버에서 다시 검색할 필요가 없으며, 응답에서 받은 새로운 <code class="language-plaintext highlighter-rouge">validator</code>에 우발적인 덮어쓰기를 방지하기 위해 미래의 조건부 요청에 사용할 수 있다.</li>
</ul>

<p>타켓 리소스와 다를 경우 PUT 메서드는 요청을 적절한 형태의 에러코드를 발생할 수 있다. 이 때 409 (Conflict), 415 (Unsupported Media Type) 상태코드를 보낸다.
생성할 경우 201 (Created)를, 수정할 경우는 요청이 완료되었다는 의미로 200 (OK)이나 204 (No cotent) 상태 코드를 보낸다.</p>

<h1 id="put-or-post">PUT or POST?</h1>
<p>애석한 영어 실력으로 공식문서를 정리해보았지만 감이 일도 안 온다 도대체</p>

<blockquote>
  <font size="6">Refernce</font>
  <ul>
    <li>https://tools.ietf.org/html/rfc7231#section-4.1</li>
    <li>https://feel5ny.github.io/2019/08/16/HTTP_003_02/</li>
  </ul>
</blockquote>
:ET