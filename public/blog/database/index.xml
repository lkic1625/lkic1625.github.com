<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on Hammer&#39;s Blog</title>
    <link>http://localhost:1313/blog/database/</link>
    <description>Recent content in Database on Hammer&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <copyright>© 조원빈 - All rights reserved</copyright>
    <lastBuildDate>Sat, 08 Apr 2023 00:57:55 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Consensus in distributed systems</title>
      <link>http://localhost:1313/consensus-in-distributed-systems/</link>
      <pubDate>Sat, 08 Apr 2023 00:57:55 +0900</pubDate>
      <guid>http://localhost:1313/consensus-in-distributed-systems/</guid>
      <description>&lt;h1 id=&#34;개요&#34;&gt;개요&lt;/h1&gt;&#xA;&lt;p&gt;몇가지 상황을 시뮬레이션 해봅시다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;갑자기 우리 데이터베이스 시스템의 트랜잭션 매니저가 큰 결함이 생겼다고 합니다. 급하게 데이터베이스 위에 서비스 레이어를 달아서 이 힘든 상황을 이겨내려고 합니다. 데이터베이스는 파티셔닝되어 있습니다. 간단한 트랜잭션을 서비스 레이어에서 어떻게 구현할 건가요?&lt;/li&gt;&#xA;&lt;li&gt;팀장이 갑자기 결제 시스템을 &lt;em&gt;MSA&lt;/em&gt; 로 변경하고, &lt;em&gt;MSA&lt;/em&gt; 상에서 분산 트랜잭션을 구현하자고 합니다. 뭐부터 해야할지 모르겠습니다. 급하게 구글을 처보니 2PC, Saga Pattern 같은 게 보이긴 하네요. 근데 별로 좋아보이진 않습니다. 어떻게 접근해야할까요?&lt;/li&gt;&#xA;&lt;li&gt;물리적으로 분리된 서로 다른 머신들에게 요청을 동시다발적으로 전파하고 있습니다. 모든 노드가 이 요청을 똑같은 순서로, 똑같은 응답을 한 것&lt;strong&gt;처럼&lt;/strong&gt; 보이게 하려면 어떻게 해야할까요? 또, 어떻게 효율적으로 할 수 있을까요?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;세 가지 상황은 모두 분산 시스템에서의 트랜잭션, 합의와 관련있습니다. 뭐든지 분산 환경에서 일어나면 마법이라도 부릴 것 같고, 되게 난해한 느낌이 듭니다.&#xA;오늘 다뤄볼 이야기는 따라서, 분산 데이터베이스 시스템 안에서의 &lt;strong&gt;트랜잭션이&lt;/strong&gt; 어떤 것이며, 어떻게 이용되는지 간단한 예시를 통해 알아보려고 합니다. 또한, 더 일반적인 문제에 해당하는 &lt;strong&gt;합의&lt;/strong&gt;를 어떻게 구현하는지 실제 예시를 보며 소개해보겠습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Database Internals</title>
      <link>http://localhost:1313/database-internals/</link>
      <pubDate>Thu, 12 Nov 2020 00:23:48 +0900</pubDate>
      <guid>http://localhost:1313/database-internals/</guid>
      <description>&lt;h1 id=&#34;개요&#34;&gt;개요&lt;/h1&gt;&#xA;&lt;p&gt;해당 개시글은 데이터베이스 인터널스를 읽고 정리한 아티클입니다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;2장-b-트리-개요&#34;&gt;2장 B-트리 개요&lt;/h1&gt;&#xA;&lt;h2 id=&#34;디스크-기반-스토리지용-트리&#34;&gt;디스크 기반 스토리지용 트리&lt;/h2&gt;&#xA;&lt;p&gt;이진 트리의 경우 트리의 fanout(한 노드가 가질 수 있는 최대 자식 노드의 개수)가 매우 낮기에 트리의 리밸런싱, 노드 재배치, 포인터 갱신이 자주 발생함.  잦은 포인터 갱신은 높은 유지 비용을 유발하고 디스크 기반 자료 구조로 부적합하다.&lt;/p&gt;&#xA;&lt;p&gt;또한, 노드는 지역성 측면에서 새 노드는 부모 노드와 가까운 위치에 저장되지 않을 수 있음. (이를 paged binary tree 가 일부 해결해줄 수는 있음)&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
